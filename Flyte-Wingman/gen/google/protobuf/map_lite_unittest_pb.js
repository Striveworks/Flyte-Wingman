// source: google/protobuf/map_lite_unittest.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_unittest_lite_pb = require('google-protobuf/google/protobuf/unittest_lite_pb.js');
goog.object.extend(proto, google_protobuf_unittest_lite_pb);
goog.exportSymbol('proto.protobuf_unittest.ForeignMessageArenaLite', null, global);
goog.exportSymbol('proto.protobuf_unittest.MapEnumLite', null, global);
goog.exportSymbol('proto.protobuf_unittest.Proto2MapEnumLite', null, global);
goog.exportSymbol('proto.protobuf_unittest.Proto2MapEnumPlusExtraLite', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestArenaMapLite', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestEnumMapLite', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestEnumMapPlusExtraLite', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestMapLite', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestMessageMapLite', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestRequiredLite', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestRequiredMessageMapLite', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestMapLite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestMapLite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestMapLite.displayName = 'proto.protobuf_unittest.TestMapLite';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestArenaMapLite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestArenaMapLite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestArenaMapLite.displayName = 'proto.protobuf_unittest.TestArenaMapLite';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestRequiredMessageMapLite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestRequiredMessageMapLite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestRequiredMessageMapLite.displayName = 'proto.protobuf_unittest.TestRequiredMessageMapLite';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestEnumMapLite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestEnumMapLite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestEnumMapLite.displayName = 'proto.protobuf_unittest.TestEnumMapLite';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestEnumMapPlusExtraLite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestEnumMapPlusExtraLite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestEnumMapPlusExtraLite.displayName = 'proto.protobuf_unittest.TestEnumMapPlusExtraLite';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestMessageMapLite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestMessageMapLite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestMessageMapLite.displayName = 'proto.protobuf_unittest.TestMessageMapLite';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestRequiredLite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestRequiredLite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestRequiredLite.displayName = 'proto.protobuf_unittest.TestRequiredLite';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.ForeignMessageArenaLite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.ForeignMessageArenaLite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.ForeignMessageArenaLite.displayName = 'proto.protobuf_unittest.ForeignMessageArenaLite';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestMapLite.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestMapLite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestMapLite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestMapLite.toObject = function(includeInstance, msg) {
  var f, obj = {
    mapInt32Int32Map: (f = msg.getMapInt32Int32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapInt64Int64Map: (f = msg.getMapInt64Int64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapUint32Uint32Map: (f = msg.getMapUint32Uint32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapUint64Uint64Map: (f = msg.getMapUint64Uint64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapSint32Sint32Map: (f = msg.getMapSint32Sint32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapSint64Sint64Map: (f = msg.getMapSint64Sint64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapFixed32Fixed32Map: (f = msg.getMapFixed32Fixed32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapFixed64Fixed64Map: (f = msg.getMapFixed64Fixed64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapSfixed32Sfixed32Map: (f = msg.getMapSfixed32Sfixed32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapSfixed64Sfixed64Map: (f = msg.getMapSfixed64Sfixed64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32FloatMap: (f = msg.getMapInt32FloatMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32DoubleMap: (f = msg.getMapInt32DoubleMap()) ? f.toObject(includeInstance, undefined) : [],
    mapBoolBoolMap: (f = msg.getMapBoolBoolMap()) ? f.toObject(includeInstance, undefined) : [],
    mapStringStringMap: (f = msg.getMapStringStringMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32BytesMap: (f = msg.getMapInt32BytesMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32EnumMap: (f = msg.getMapInt32EnumMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32ForeignMessageMap: (f = msg.getMapInt32ForeignMessageMap()) ? f.toObject(includeInstance, proto.protobuf_unittest.ForeignMessageLite.toObject) : [],
    teboringMap: (f = msg.getTeboringMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestMapLite}
 */
proto.protobuf_unittest.TestMapLite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestMapLite;
  return proto.protobuf_unittest.TestMapLite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestMapLite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestMapLite}
 */
proto.protobuf_unittest.TestMapLite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMapInt32Int32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt32, null, 0, 0);
         });
      break;
    case 2:
      var value = msg.getMapInt64Int64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt64, jspb.BinaryReader.prototype.readInt64, null, 0, 0);
         });
      break;
    case 3:
      var value = msg.getMapUint32Uint32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32, null, 0, 0);
         });
      break;
    case 4:
      var value = msg.getMapUint64Uint64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readUint64, null, 0, 0);
         });
      break;
    case 5:
      var value = msg.getMapSint32Sint32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSint32, jspb.BinaryReader.prototype.readSint32, null, 0, 0);
         });
      break;
    case 6:
      var value = msg.getMapSint64Sint64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSint64, jspb.BinaryReader.prototype.readSint64, null, 0, 0);
         });
      break;
    case 7:
      var value = msg.getMapFixed32Fixed32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readFixed32, jspb.BinaryReader.prototype.readFixed32, null, 0, 0);
         });
      break;
    case 8:
      var value = msg.getMapFixed64Fixed64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readFixed64, jspb.BinaryReader.prototype.readFixed64, null, 0, 0);
         });
      break;
    case 9:
      var value = msg.getMapSfixed32Sfixed32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSfixed32, jspb.BinaryReader.prototype.readSfixed32, null, 0, 0);
         });
      break;
    case 10:
      var value = msg.getMapSfixed64Sfixed64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSfixed64, jspb.BinaryReader.prototype.readSfixed64, null, 0, 0);
         });
      break;
    case 11:
      var value = msg.getMapInt32FloatMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readFloat, null, 0, 0.0);
         });
      break;
    case 12:
      var value = msg.getMapInt32DoubleMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readDouble, null, 0, 0.0);
         });
      break;
    case 13:
      var value = msg.getMapBoolBoolMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readBool, jspb.BinaryReader.prototype.readBool, null, false, false);
         });
      break;
    case 14:
      var value = msg.getMapStringStringMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 15:
      var value = msg.getMapInt32BytesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readBytes, null, 0, "");
         });
      break;
    case 16:
      var value = msg.getMapInt32EnumMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readEnum, null, 0, 0);
         });
      break;
    case 17:
      var value = msg.getMapInt32ForeignMessageMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.ForeignMessageLite.deserializeBinaryFromReader, 0, new proto.protobuf_unittest.ForeignMessageLite());
         });
      break;
    case 18:
      var value = msg.getTeboringMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt32, null, 0, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestMapLite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestMapLite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestMapLite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestMapLite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMapInt32Int32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getMapInt64Int64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeInt64, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getMapUint32Uint32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getMapUint64Uint64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getMapSint32Sint32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeSint32, jspb.BinaryWriter.prototype.writeSint32);
  }
  f = message.getMapSint64Sint64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeSint64, jspb.BinaryWriter.prototype.writeSint64);
  }
  f = message.getMapFixed32Fixed32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeFixed32, jspb.BinaryWriter.prototype.writeFixed32);
  }
  f = message.getMapFixed64Fixed64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeFixed64, jspb.BinaryWriter.prototype.writeFixed64);
  }
  f = message.getMapSfixed32Sfixed32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeSfixed32, jspb.BinaryWriter.prototype.writeSfixed32);
  }
  f = message.getMapSfixed64Sfixed64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeSfixed64, jspb.BinaryWriter.prototype.writeSfixed64);
  }
  f = message.getMapInt32FloatMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeFloat);
  }
  f = message.getMapInt32DoubleMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeDouble);
  }
  f = message.getMapBoolBoolMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(13, writer, jspb.BinaryWriter.prototype.writeBool, jspb.BinaryWriter.prototype.writeBool);
  }
  f = message.getMapStringStringMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(14, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMapInt32BytesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getMapInt32EnumMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(16, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeEnum);
  }
  f = message.getMapInt32ForeignMessageMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(17, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.ForeignMessageLite.serializeBinaryToWriter);
  }
  f = message.getTeboringMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(18, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt32);
  }
};


/**
 * map<int32, int32> map_int32_int32 = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMapLite.prototype.getMapInt32Int32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMapLite} returns this
 */
proto.protobuf_unittest.TestMapLite.prototype.clearMapInt32Int32Map = function() {
  this.getMapInt32Int32Map().clear();
  return this;};


/**
 * map<int64, int64> map_int64_int64 = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMapLite.prototype.getMapInt64Int64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMapLite} returns this
 */
proto.protobuf_unittest.TestMapLite.prototype.clearMapInt64Int64Map = function() {
  this.getMapInt64Int64Map().clear();
  return this;};


/**
 * map<uint32, uint32> map_uint32_uint32 = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMapLite.prototype.getMapUint32Uint32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMapLite} returns this
 */
proto.protobuf_unittest.TestMapLite.prototype.clearMapUint32Uint32Map = function() {
  this.getMapUint32Uint32Map().clear();
  return this;};


/**
 * map<uint64, uint64> map_uint64_uint64 = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMapLite.prototype.getMapUint64Uint64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMapLite} returns this
 */
proto.protobuf_unittest.TestMapLite.prototype.clearMapUint64Uint64Map = function() {
  this.getMapUint64Uint64Map().clear();
  return this;};


/**
 * map<sint32, sint32> map_sint32_sint32 = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMapLite.prototype.getMapSint32Sint32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMapLite} returns this
 */
proto.protobuf_unittest.TestMapLite.prototype.clearMapSint32Sint32Map = function() {
  this.getMapSint32Sint32Map().clear();
  return this;};


/**
 * map<sint64, sint64> map_sint64_sint64 = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMapLite.prototype.getMapSint64Sint64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMapLite} returns this
 */
proto.protobuf_unittest.TestMapLite.prototype.clearMapSint64Sint64Map = function() {
  this.getMapSint64Sint64Map().clear();
  return this;};


/**
 * map<fixed32, fixed32> map_fixed32_fixed32 = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMapLite.prototype.getMapFixed32Fixed32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMapLite} returns this
 */
proto.protobuf_unittest.TestMapLite.prototype.clearMapFixed32Fixed32Map = function() {
  this.getMapFixed32Fixed32Map().clear();
  return this;};


/**
 * map<fixed64, fixed64> map_fixed64_fixed64 = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMapLite.prototype.getMapFixed64Fixed64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMapLite} returns this
 */
proto.protobuf_unittest.TestMapLite.prototype.clearMapFixed64Fixed64Map = function() {
  this.getMapFixed64Fixed64Map().clear();
  return this;};


/**
 * map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMapLite.prototype.getMapSfixed32Sfixed32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMapLite} returns this
 */
proto.protobuf_unittest.TestMapLite.prototype.clearMapSfixed32Sfixed32Map = function() {
  this.getMapSfixed32Sfixed32Map().clear();
  return this;};


/**
 * map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMapLite.prototype.getMapSfixed64Sfixed64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMapLite} returns this
 */
proto.protobuf_unittest.TestMapLite.prototype.clearMapSfixed64Sfixed64Map = function() {
  this.getMapSfixed64Sfixed64Map().clear();
  return this;};


/**
 * map<int32, float> map_int32_float = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMapLite.prototype.getMapInt32FloatMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMapLite} returns this
 */
proto.protobuf_unittest.TestMapLite.prototype.clearMapInt32FloatMap = function() {
  this.getMapInt32FloatMap().clear();
  return this;};


/**
 * map<int32, double> map_int32_double = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMapLite.prototype.getMapInt32DoubleMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMapLite} returns this
 */
proto.protobuf_unittest.TestMapLite.prototype.clearMapInt32DoubleMap = function() {
  this.getMapInt32DoubleMap().clear();
  return this;};


/**
 * map<bool, bool> map_bool_bool = 13;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<boolean,boolean>}
 */
proto.protobuf_unittest.TestMapLite.prototype.getMapBoolBoolMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<boolean,boolean>} */ (
      jspb.Message.getMapField(this, 13, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMapLite} returns this
 */
proto.protobuf_unittest.TestMapLite.prototype.clearMapBoolBoolMap = function() {
  this.getMapBoolBoolMap().clear();
  return this;};


/**
 * map<string, string> map_string_string = 14;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.protobuf_unittest.TestMapLite.prototype.getMapStringStringMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 14, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMapLite} returns this
 */
proto.protobuf_unittest.TestMapLite.prototype.clearMapStringStringMap = function() {
  this.getMapStringStringMap().clear();
  return this;};


/**
 * map<int32, bytes> map_int32_bytes = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!(string|Uint8Array)>}
 */
proto.protobuf_unittest.TestMapLite.prototype.getMapInt32BytesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMapLite} returns this
 */
proto.protobuf_unittest.TestMapLite.prototype.clearMapInt32BytesMap = function() {
  this.getMapInt32BytesMap().clear();
  return this;};


/**
 * map<int32, MapEnumLite> map_int32_enum = 16;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.MapEnumLite>}
 */
proto.protobuf_unittest.TestMapLite.prototype.getMapInt32EnumMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.MapEnumLite>} */ (
      jspb.Message.getMapField(this, 16, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMapLite} returns this
 */
proto.protobuf_unittest.TestMapLite.prototype.clearMapInt32EnumMap = function() {
  this.getMapInt32EnumMap().clear();
  return this;};


/**
 * map<int32, ForeignMessageLite> map_int32_foreign_message = 17;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.ForeignMessageLite>}
 */
proto.protobuf_unittest.TestMapLite.prototype.getMapInt32ForeignMessageMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.ForeignMessageLite>} */ (
      jspb.Message.getMapField(this, 17, opt_noLazyCreate,
      proto.protobuf_unittest.ForeignMessageLite));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMapLite} returns this
 */
proto.protobuf_unittest.TestMapLite.prototype.clearMapInt32ForeignMessageMap = function() {
  this.getMapInt32ForeignMessageMap().clear();
  return this;};


/**
 * map<int32, int32> teboring = 18;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMapLite.prototype.getTeboringMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 18, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMapLite} returns this
 */
proto.protobuf_unittest.TestMapLite.prototype.clearTeboringMap = function() {
  this.getTeboringMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestArenaMapLite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestArenaMapLite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestArenaMapLite.toObject = function(includeInstance, msg) {
  var f, obj = {
    mapInt32Int32Map: (f = msg.getMapInt32Int32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapInt64Int64Map: (f = msg.getMapInt64Int64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapUint32Uint32Map: (f = msg.getMapUint32Uint32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapUint64Uint64Map: (f = msg.getMapUint64Uint64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapSint32Sint32Map: (f = msg.getMapSint32Sint32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapSint64Sint64Map: (f = msg.getMapSint64Sint64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapFixed32Fixed32Map: (f = msg.getMapFixed32Fixed32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapFixed64Fixed64Map: (f = msg.getMapFixed64Fixed64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapSfixed32Sfixed32Map: (f = msg.getMapSfixed32Sfixed32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapSfixed64Sfixed64Map: (f = msg.getMapSfixed64Sfixed64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32FloatMap: (f = msg.getMapInt32FloatMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32DoubleMap: (f = msg.getMapInt32DoubleMap()) ? f.toObject(includeInstance, undefined) : [],
    mapBoolBoolMap: (f = msg.getMapBoolBoolMap()) ? f.toObject(includeInstance, undefined) : [],
    mapStringStringMap: (f = msg.getMapStringStringMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32BytesMap: (f = msg.getMapInt32BytesMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32EnumMap: (f = msg.getMapInt32EnumMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32ForeignMessageMap: (f = msg.getMapInt32ForeignMessageMap()) ? f.toObject(includeInstance, proto.protobuf_unittest.ForeignMessageArenaLite.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestArenaMapLite}
 */
proto.protobuf_unittest.TestArenaMapLite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestArenaMapLite;
  return proto.protobuf_unittest.TestArenaMapLite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestArenaMapLite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestArenaMapLite}
 */
proto.protobuf_unittest.TestArenaMapLite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMapInt32Int32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt32, null, 0, 0);
         });
      break;
    case 2:
      var value = msg.getMapInt64Int64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt64, jspb.BinaryReader.prototype.readInt64, null, 0, 0);
         });
      break;
    case 3:
      var value = msg.getMapUint32Uint32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32, null, 0, 0);
         });
      break;
    case 4:
      var value = msg.getMapUint64Uint64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readUint64, null, 0, 0);
         });
      break;
    case 5:
      var value = msg.getMapSint32Sint32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSint32, jspb.BinaryReader.prototype.readSint32, null, 0, 0);
         });
      break;
    case 6:
      var value = msg.getMapSint64Sint64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSint64, jspb.BinaryReader.prototype.readSint64, null, 0, 0);
         });
      break;
    case 7:
      var value = msg.getMapFixed32Fixed32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readFixed32, jspb.BinaryReader.prototype.readFixed32, null, 0, 0);
         });
      break;
    case 8:
      var value = msg.getMapFixed64Fixed64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readFixed64, jspb.BinaryReader.prototype.readFixed64, null, 0, 0);
         });
      break;
    case 9:
      var value = msg.getMapSfixed32Sfixed32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSfixed32, jspb.BinaryReader.prototype.readSfixed32, null, 0, 0);
         });
      break;
    case 10:
      var value = msg.getMapSfixed64Sfixed64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSfixed64, jspb.BinaryReader.prototype.readSfixed64, null, 0, 0);
         });
      break;
    case 11:
      var value = msg.getMapInt32FloatMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readFloat, null, 0, 0.0);
         });
      break;
    case 12:
      var value = msg.getMapInt32DoubleMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readDouble, null, 0, 0.0);
         });
      break;
    case 13:
      var value = msg.getMapBoolBoolMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readBool, jspb.BinaryReader.prototype.readBool, null, false, false);
         });
      break;
    case 14:
      var value = msg.getMapStringStringMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 15:
      var value = msg.getMapInt32BytesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readBytes, null, 0, "");
         });
      break;
    case 16:
      var value = msg.getMapInt32EnumMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readEnum, null, 0, 0);
         });
      break;
    case 17:
      var value = msg.getMapInt32ForeignMessageMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.ForeignMessageArenaLite.deserializeBinaryFromReader, 0, new proto.protobuf_unittest.ForeignMessageArenaLite());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestArenaMapLite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestArenaMapLite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestArenaMapLite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMapInt32Int32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getMapInt64Int64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeInt64, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getMapUint32Uint32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getMapUint64Uint64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getMapSint32Sint32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeSint32, jspb.BinaryWriter.prototype.writeSint32);
  }
  f = message.getMapSint64Sint64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeSint64, jspb.BinaryWriter.prototype.writeSint64);
  }
  f = message.getMapFixed32Fixed32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeFixed32, jspb.BinaryWriter.prototype.writeFixed32);
  }
  f = message.getMapFixed64Fixed64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeFixed64, jspb.BinaryWriter.prototype.writeFixed64);
  }
  f = message.getMapSfixed32Sfixed32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeSfixed32, jspb.BinaryWriter.prototype.writeSfixed32);
  }
  f = message.getMapSfixed64Sfixed64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeSfixed64, jspb.BinaryWriter.prototype.writeSfixed64);
  }
  f = message.getMapInt32FloatMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeFloat);
  }
  f = message.getMapInt32DoubleMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeDouble);
  }
  f = message.getMapBoolBoolMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(13, writer, jspb.BinaryWriter.prototype.writeBool, jspb.BinaryWriter.prototype.writeBool);
  }
  f = message.getMapStringStringMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(14, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMapInt32BytesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getMapInt32EnumMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(16, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeEnum);
  }
  f = message.getMapInt32ForeignMessageMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(17, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.ForeignMessageArenaLite.serializeBinaryToWriter);
  }
};


/**
 * map<int32, int32> map_int32_int32 = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.getMapInt32Int32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMapLite} returns this
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.clearMapInt32Int32Map = function() {
  this.getMapInt32Int32Map().clear();
  return this;};


/**
 * map<int64, int64> map_int64_int64 = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.getMapInt64Int64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMapLite} returns this
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.clearMapInt64Int64Map = function() {
  this.getMapInt64Int64Map().clear();
  return this;};


/**
 * map<uint32, uint32> map_uint32_uint32 = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.getMapUint32Uint32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMapLite} returns this
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.clearMapUint32Uint32Map = function() {
  this.getMapUint32Uint32Map().clear();
  return this;};


/**
 * map<uint64, uint64> map_uint64_uint64 = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.getMapUint64Uint64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMapLite} returns this
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.clearMapUint64Uint64Map = function() {
  this.getMapUint64Uint64Map().clear();
  return this;};


/**
 * map<sint32, sint32> map_sint32_sint32 = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.getMapSint32Sint32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMapLite} returns this
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.clearMapSint32Sint32Map = function() {
  this.getMapSint32Sint32Map().clear();
  return this;};


/**
 * map<sint64, sint64> map_sint64_sint64 = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.getMapSint64Sint64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMapLite} returns this
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.clearMapSint64Sint64Map = function() {
  this.getMapSint64Sint64Map().clear();
  return this;};


/**
 * map<fixed32, fixed32> map_fixed32_fixed32 = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.getMapFixed32Fixed32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMapLite} returns this
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.clearMapFixed32Fixed32Map = function() {
  this.getMapFixed32Fixed32Map().clear();
  return this;};


/**
 * map<fixed64, fixed64> map_fixed64_fixed64 = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.getMapFixed64Fixed64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMapLite} returns this
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.clearMapFixed64Fixed64Map = function() {
  this.getMapFixed64Fixed64Map().clear();
  return this;};


/**
 * map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.getMapSfixed32Sfixed32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMapLite} returns this
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.clearMapSfixed32Sfixed32Map = function() {
  this.getMapSfixed32Sfixed32Map().clear();
  return this;};


/**
 * map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.getMapSfixed64Sfixed64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMapLite} returns this
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.clearMapSfixed64Sfixed64Map = function() {
  this.getMapSfixed64Sfixed64Map().clear();
  return this;};


/**
 * map<int32, float> map_int32_float = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.getMapInt32FloatMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMapLite} returns this
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.clearMapInt32FloatMap = function() {
  this.getMapInt32FloatMap().clear();
  return this;};


/**
 * map<int32, double> map_int32_double = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.getMapInt32DoubleMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMapLite} returns this
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.clearMapInt32DoubleMap = function() {
  this.getMapInt32DoubleMap().clear();
  return this;};


/**
 * map<bool, bool> map_bool_bool = 13;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<boolean,boolean>}
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.getMapBoolBoolMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<boolean,boolean>} */ (
      jspb.Message.getMapField(this, 13, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMapLite} returns this
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.clearMapBoolBoolMap = function() {
  this.getMapBoolBoolMap().clear();
  return this;};


/**
 * map<string, string> map_string_string = 14;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.getMapStringStringMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 14, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMapLite} returns this
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.clearMapStringStringMap = function() {
  this.getMapStringStringMap().clear();
  return this;};


/**
 * map<int32, bytes> map_int32_bytes = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!(string|Uint8Array)>}
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.getMapInt32BytesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMapLite} returns this
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.clearMapInt32BytesMap = function() {
  this.getMapInt32BytesMap().clear();
  return this;};


/**
 * map<int32, MapEnumLite> map_int32_enum = 16;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.MapEnumLite>}
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.getMapInt32EnumMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.MapEnumLite>} */ (
      jspb.Message.getMapField(this, 16, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMapLite} returns this
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.clearMapInt32EnumMap = function() {
  this.getMapInt32EnumMap().clear();
  return this;};


/**
 * map<int32, ForeignMessageArenaLite> map_int32_foreign_message = 17;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.ForeignMessageArenaLite>}
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.getMapInt32ForeignMessageMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.ForeignMessageArenaLite>} */ (
      jspb.Message.getMapField(this, 17, opt_noLazyCreate,
      proto.protobuf_unittest.ForeignMessageArenaLite));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMapLite} returns this
 */
proto.protobuf_unittest.TestArenaMapLite.prototype.clearMapInt32ForeignMessageMap = function() {
  this.getMapInt32ForeignMessageMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestRequiredMessageMapLite.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestRequiredMessageMapLite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestRequiredMessageMapLite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestRequiredMessageMapLite.toObject = function(includeInstance, msg) {
  var f, obj = {
    mapFieldMap: (f = msg.getMapFieldMap()) ? f.toObject(includeInstance, proto.protobuf_unittest.TestRequiredLite.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestRequiredMessageMapLite}
 */
proto.protobuf_unittest.TestRequiredMessageMapLite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestRequiredMessageMapLite;
  return proto.protobuf_unittest.TestRequiredMessageMapLite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestRequiredMessageMapLite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestRequiredMessageMapLite}
 */
proto.protobuf_unittest.TestRequiredMessageMapLite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMapFieldMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.TestRequiredLite.deserializeBinaryFromReader, 0, new proto.protobuf_unittest.TestRequiredLite());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestRequiredMessageMapLite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestRequiredMessageMapLite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestRequiredMessageMapLite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestRequiredMessageMapLite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMapFieldMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.TestRequiredLite.serializeBinaryToWriter);
  }
};


/**
 * map<int32, TestRequiredLite> map_field = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.TestRequiredLite>}
 */
proto.protobuf_unittest.TestRequiredMessageMapLite.prototype.getMapFieldMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.TestRequiredLite>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.protobuf_unittest.TestRequiredLite));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestRequiredMessageMapLite} returns this
 */
proto.protobuf_unittest.TestRequiredMessageMapLite.prototype.clearMapFieldMap = function() {
  this.getMapFieldMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestEnumMapLite.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestEnumMapLite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestEnumMapLite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestEnumMapLite.toObject = function(includeInstance, msg) {
  var f, obj = {
    knownMapFieldMap: (f = msg.getKnownMapFieldMap()) ? f.toObject(includeInstance, undefined) : [],
    unknownMapFieldMap: (f = msg.getUnknownMapFieldMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestEnumMapLite}
 */
proto.protobuf_unittest.TestEnumMapLite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestEnumMapLite;
  return proto.protobuf_unittest.TestEnumMapLite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestEnumMapLite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestEnumMapLite}
 */
proto.protobuf_unittest.TestEnumMapLite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 101:
      var value = msg.getKnownMapFieldMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readEnum, null, 0, 0);
         });
      break;
    case 102:
      var value = msg.getUnknownMapFieldMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readEnum, null, 0, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestEnumMapLite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestEnumMapLite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestEnumMapLite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestEnumMapLite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKnownMapFieldMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(101, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeEnum);
  }
  f = message.getUnknownMapFieldMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(102, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeEnum);
  }
};


/**
 * map<int32, Proto2MapEnumLite> known_map_field = 101;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.Proto2MapEnumLite>}
 */
proto.protobuf_unittest.TestEnumMapLite.prototype.getKnownMapFieldMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.Proto2MapEnumLite>} */ (
      jspb.Message.getMapField(this, 101, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestEnumMapLite} returns this
 */
proto.protobuf_unittest.TestEnumMapLite.prototype.clearKnownMapFieldMap = function() {
  this.getKnownMapFieldMap().clear();
  return this;};


/**
 * map<int32, Proto2MapEnumLite> unknown_map_field = 102;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.Proto2MapEnumLite>}
 */
proto.protobuf_unittest.TestEnumMapLite.prototype.getUnknownMapFieldMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.Proto2MapEnumLite>} */ (
      jspb.Message.getMapField(this, 102, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestEnumMapLite} returns this
 */
proto.protobuf_unittest.TestEnumMapLite.prototype.clearUnknownMapFieldMap = function() {
  this.getUnknownMapFieldMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestEnumMapPlusExtraLite.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestEnumMapPlusExtraLite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestEnumMapPlusExtraLite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestEnumMapPlusExtraLite.toObject = function(includeInstance, msg) {
  var f, obj = {
    knownMapFieldMap: (f = msg.getKnownMapFieldMap()) ? f.toObject(includeInstance, undefined) : [],
    unknownMapFieldMap: (f = msg.getUnknownMapFieldMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestEnumMapPlusExtraLite}
 */
proto.protobuf_unittest.TestEnumMapPlusExtraLite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestEnumMapPlusExtraLite;
  return proto.protobuf_unittest.TestEnumMapPlusExtraLite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestEnumMapPlusExtraLite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestEnumMapPlusExtraLite}
 */
proto.protobuf_unittest.TestEnumMapPlusExtraLite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 101:
      var value = msg.getKnownMapFieldMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readEnum, null, 0, 0);
         });
      break;
    case 102:
      var value = msg.getUnknownMapFieldMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readEnum, null, 0, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestEnumMapPlusExtraLite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestEnumMapPlusExtraLite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestEnumMapPlusExtraLite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestEnumMapPlusExtraLite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKnownMapFieldMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(101, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeEnum);
  }
  f = message.getUnknownMapFieldMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(102, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeEnum);
  }
};


/**
 * map<int32, Proto2MapEnumPlusExtraLite> known_map_field = 101;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.Proto2MapEnumPlusExtraLite>}
 */
proto.protobuf_unittest.TestEnumMapPlusExtraLite.prototype.getKnownMapFieldMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.Proto2MapEnumPlusExtraLite>} */ (
      jspb.Message.getMapField(this, 101, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestEnumMapPlusExtraLite} returns this
 */
proto.protobuf_unittest.TestEnumMapPlusExtraLite.prototype.clearKnownMapFieldMap = function() {
  this.getKnownMapFieldMap().clear();
  return this;};


/**
 * map<int32, Proto2MapEnumPlusExtraLite> unknown_map_field = 102;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.Proto2MapEnumPlusExtraLite>}
 */
proto.protobuf_unittest.TestEnumMapPlusExtraLite.prototype.getUnknownMapFieldMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.Proto2MapEnumPlusExtraLite>} */ (
      jspb.Message.getMapField(this, 102, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestEnumMapPlusExtraLite} returns this
 */
proto.protobuf_unittest.TestEnumMapPlusExtraLite.prototype.clearUnknownMapFieldMap = function() {
  this.getUnknownMapFieldMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestMessageMapLite.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestMessageMapLite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestMessageMapLite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestMessageMapLite.toObject = function(includeInstance, msg) {
  var f, obj = {
    mapInt32MessageMap: (f = msg.getMapInt32MessageMap()) ? f.toObject(includeInstance, proto.protobuf_unittest.TestAllTypesLite.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestMessageMapLite}
 */
proto.protobuf_unittest.TestMessageMapLite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestMessageMapLite;
  return proto.protobuf_unittest.TestMessageMapLite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestMessageMapLite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestMessageMapLite}
 */
proto.protobuf_unittest.TestMessageMapLite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMapInt32MessageMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.TestAllTypesLite.deserializeBinaryFromReader, 0, new proto.protobuf_unittest.TestAllTypesLite());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestMessageMapLite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestMessageMapLite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestMessageMapLite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestMessageMapLite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMapInt32MessageMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.TestAllTypesLite.serializeBinaryToWriter);
  }
};


/**
 * map<int32, TestAllTypesLite> map_int32_message = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.TestAllTypesLite>}
 */
proto.protobuf_unittest.TestMessageMapLite.prototype.getMapInt32MessageMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.TestAllTypesLite>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.protobuf_unittest.TestAllTypesLite));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMessageMapLite} returns this
 */
proto.protobuf_unittest.TestMessageMapLite.prototype.clearMapInt32MessageMap = function() {
  this.getMapInt32MessageMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestRequiredLite.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestRequiredLite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestRequiredLite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestRequiredLite.toObject = function(includeInstance, msg) {
  var f, obj = {
    a: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    b: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    c: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestRequiredLite}
 */
proto.protobuf_unittest.TestRequiredLite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestRequiredLite;
  return proto.protobuf_unittest.TestRequiredLite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestRequiredLite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestRequiredLite}
 */
proto.protobuf_unittest.TestRequiredLite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setA(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setB(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setC(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestRequiredLite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestRequiredLite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestRequiredLite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestRequiredLite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `single`.
 * @type {!jspb.ExtensionFieldInfo<!proto.protobuf_unittest.TestRequiredLite>}
 */
proto.protobuf_unittest.TestRequiredLite.single = new jspb.ExtensionFieldInfo(
    1000,
    {single: 0},
    proto.protobuf_unittest.TestRequiredLite,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.protobuf_unittest.TestRequiredLite.toObject),
    0);

google_protobuf_unittest_lite_pb.TestAllExtensionsLite.extensionsBinary[1000] = new jspb.ExtensionFieldBinaryInfo(
    proto.protobuf_unittest.TestRequiredLite.single,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.protobuf_unittest.TestRequiredLite.serializeBinaryToWriter,
    proto.protobuf_unittest.TestRequiredLite.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_unittest_lite_pb.TestAllExtensionsLite.extensions[1000] = proto.protobuf_unittest.TestRequiredLite.single;

/**
 * required int32 a = 1;
 * @return {number}
 */
proto.protobuf_unittest.TestRequiredLite.prototype.getA = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf_unittest.TestRequiredLite} returns this
 */
proto.protobuf_unittest.TestRequiredLite.prototype.setA = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.TestRequiredLite} returns this
 */
proto.protobuf_unittest.TestRequiredLite.prototype.clearA = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestRequiredLite.prototype.hasA = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 b = 2;
 * @return {number}
 */
proto.protobuf_unittest.TestRequiredLite.prototype.getB = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf_unittest.TestRequiredLite} returns this
 */
proto.protobuf_unittest.TestRequiredLite.prototype.setB = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.TestRequiredLite} returns this
 */
proto.protobuf_unittest.TestRequiredLite.prototype.clearB = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestRequiredLite.prototype.hasB = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 c = 3;
 * @return {number}
 */
proto.protobuf_unittest.TestRequiredLite.prototype.getC = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf_unittest.TestRequiredLite} returns this
 */
proto.protobuf_unittest.TestRequiredLite.prototype.setC = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.TestRequiredLite} returns this
 */
proto.protobuf_unittest.TestRequiredLite.prototype.clearC = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestRequiredLite.prototype.hasC = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `single`.
 * @type {!jspb.ExtensionFieldInfo<!proto.protobuf_unittest.TestRequiredLite>}
 */
proto.protobuf_unittest.TestRequiredLite.single = new jspb.ExtensionFieldInfo(
    1000,
    {single: 0},
    proto.protobuf_unittest.TestRequiredLite,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.protobuf_unittest.TestRequiredLite.toObject),
    0);

google_protobuf_unittest_lite_pb.TestAllExtensionsLite.extensionsBinary[1000] = new jspb.ExtensionFieldBinaryInfo(
    proto.protobuf_unittest.TestRequiredLite.single,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.protobuf_unittest.TestRequiredLite.serializeBinaryToWriter,
    proto.protobuf_unittest.TestRequiredLite.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_unittest_lite_pb.TestAllExtensionsLite.extensions[1000] = proto.protobuf_unittest.TestRequiredLite.single;




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.ForeignMessageArenaLite.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.ForeignMessageArenaLite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.ForeignMessageArenaLite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.ForeignMessageArenaLite.toObject = function(includeInstance, msg) {
  var f, obj = {
    c: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.ForeignMessageArenaLite}
 */
proto.protobuf_unittest.ForeignMessageArenaLite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.ForeignMessageArenaLite;
  return proto.protobuf_unittest.ForeignMessageArenaLite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.ForeignMessageArenaLite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.ForeignMessageArenaLite}
 */
proto.protobuf_unittest.ForeignMessageArenaLite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setC(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.ForeignMessageArenaLite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.ForeignMessageArenaLite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.ForeignMessageArenaLite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.ForeignMessageArenaLite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 c = 1;
 * @return {number}
 */
proto.protobuf_unittest.ForeignMessageArenaLite.prototype.getC = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf_unittest.ForeignMessageArenaLite} returns this
 */
proto.protobuf_unittest.ForeignMessageArenaLite.prototype.setC = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.ForeignMessageArenaLite} returns this
 */
proto.protobuf_unittest.ForeignMessageArenaLite.prototype.clearC = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.ForeignMessageArenaLite.prototype.hasC = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.protobuf_unittest.Proto2MapEnumLite = {
  PROTO2_MAP_ENUM_FOO_LITE: 0,
  PROTO2_MAP_ENUM_BAR_LITE: 1,
  PROTO2_MAP_ENUM_BAZ_LITE: 2
};

/**
 * @enum {number}
 */
proto.protobuf_unittest.Proto2MapEnumPlusExtraLite = {
  E_PROTO2_MAP_ENUM_FOO_LITE: 0,
  E_PROTO2_MAP_ENUM_BAR_LITE: 1,
  E_PROTO2_MAP_ENUM_BAZ_LITE: 2,
  E_PROTO2_MAP_ENUM_EXTRA_LITE: 3
};

/**
 * @enum {number}
 */
proto.protobuf_unittest.MapEnumLite = {
  MAP_ENUM_FOO_LITE: 0,
  MAP_ENUM_BAR_LITE: 1,
  MAP_ENUM_BAZ_LITE: 2
};

goog.object.extend(exports, proto.protobuf_unittest);
