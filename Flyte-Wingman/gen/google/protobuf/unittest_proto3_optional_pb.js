// source: google/protobuf/unittest_proto3_optional.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_descriptor_pb = require('google-protobuf/google/protobuf/descriptor_pb.js');
goog.object.extend(proto, google_protobuf_descriptor_pb);
goog.exportSymbol('proto.protobuf_unittest.Proto3OptionalExtensions', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestProto3Optional', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestProto3Optional.NestedEnum', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestProto3Optional.NestedMessage', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestProto3OptionalMessage', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestProto3Optional = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestProto3Optional, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestProto3Optional.displayName = 'proto.protobuf_unittest.TestProto3Optional';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestProto3Optional.NestedMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestProto3Optional.NestedMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestProto3Optional.NestedMessage.displayName = 'proto.protobuf_unittest.TestProto3Optional.NestedMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestProto3OptionalMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestProto3OptionalMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestProto3OptionalMessage.displayName = 'proto.protobuf_unittest.TestProto3OptionalMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage.displayName = 'proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.Proto3OptionalExtensions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.Proto3OptionalExtensions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.Proto3OptionalExtensions.displayName = 'proto.protobuf_unittest.Proto3OptionalExtensions';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestProto3Optional.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestProto3Optional} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestProto3Optional.toObject = function(includeInstance, msg) {
  var f, obj = {
    optionalInt32: jspb.Message.getFieldWithDefault(msg, 1, 0),
    optionalInt64: jspb.Message.getFieldWithDefault(msg, 2, 0),
    optionalUint32: jspb.Message.getFieldWithDefault(msg, 3, 0),
    optionalUint64: jspb.Message.getFieldWithDefault(msg, 4, 0),
    optionalSint32: jspb.Message.getFieldWithDefault(msg, 5, 0),
    optionalSint64: jspb.Message.getFieldWithDefault(msg, 6, 0),
    optionalFixed32: jspb.Message.getFieldWithDefault(msg, 7, 0),
    optionalFixed64: jspb.Message.getFieldWithDefault(msg, 8, 0),
    optionalSfixed32: jspb.Message.getFieldWithDefault(msg, 9, 0),
    optionalSfixed64: jspb.Message.getFieldWithDefault(msg, 10, 0),
    optionalFloat: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    optionalDouble: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    optionalBool: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    optionalString: jspb.Message.getFieldWithDefault(msg, 14, ""),
    optionalBytes: msg.getOptionalBytes_asB64(),
    optionalCord: jspb.Message.getFieldWithDefault(msg, 16, ""),
    optionalNestedMessage: (f = msg.getOptionalNestedMessage()) && proto.protobuf_unittest.TestProto3Optional.NestedMessage.toObject(includeInstance, f),
    lazyNestedMessage: (f = msg.getLazyNestedMessage()) && proto.protobuf_unittest.TestProto3Optional.NestedMessage.toObject(includeInstance, f),
    optionalNestedEnum: jspb.Message.getFieldWithDefault(msg, 21, 0),
    singularInt32: jspb.Message.getFieldWithDefault(msg, 22, 0),
    singularInt64: jspb.Message.getFieldWithDefault(msg, 23, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestProto3Optional}
 */
proto.protobuf_unittest.TestProto3Optional.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestProto3Optional;
  return proto.protobuf_unittest.TestProto3Optional.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestProto3Optional} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestProto3Optional}
 */
proto.protobuf_unittest.TestProto3Optional.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOptionalInt32(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOptionalInt64(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOptionalUint32(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOptionalUint64(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setOptionalSint32(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setOptionalSint64(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setOptionalFixed32(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setOptionalFixed64(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readSfixed32());
      msg.setOptionalSfixed32(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setOptionalSfixed64(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOptionalFloat(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOptionalDouble(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOptionalBool(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setOptionalString(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOptionalBytes(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setOptionalCord(value);
      break;
    case 18:
      var value = new proto.protobuf_unittest.TestProto3Optional.NestedMessage;
      reader.readMessage(value,proto.protobuf_unittest.TestProto3Optional.NestedMessage.deserializeBinaryFromReader);
      msg.setOptionalNestedMessage(value);
      break;
    case 19:
      var value = new proto.protobuf_unittest.TestProto3Optional.NestedMessage;
      reader.readMessage(value,proto.protobuf_unittest.TestProto3Optional.NestedMessage.deserializeBinaryFromReader);
      msg.setLazyNestedMessage(value);
      break;
    case 21:
      var value = /** @type {!proto.protobuf_unittest.TestProto3Optional.NestedEnum} */ (reader.readEnum());
      msg.setOptionalNestedEnum(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSingularInt32(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSingularInt64(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestProto3Optional.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestProto3Optional} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestProto3Optional.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeSint64(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFixed64(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeSfixed32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeSfixed64(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBool(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeBytes(
      15,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getOptionalNestedMessage();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.protobuf_unittest.TestProto3Optional.NestedMessage.serializeBinaryToWriter
    );
  }
  f = message.getLazyNestedMessage();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.protobuf_unittest.TestProto3Optional.NestedMessage.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.protobuf_unittest.TestProto3Optional.NestedEnum} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeEnum(
      21,
      f
    );
  }
  f = message.getSingularInt32();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getSingularInt64();
  if (f !== 0) {
    writer.writeInt64(
      23,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.protobuf_unittest.TestProto3Optional.NestedEnum = {
  UNSPECIFIED: 0,
  FOO: 1,
  BAR: 2,
  BAZ: 3,
  NEG: -1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestProto3Optional.NestedMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestProto3Optional.NestedMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestProto3Optional.NestedMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestProto3Optional.NestedMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    bb: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestProto3Optional.NestedMessage}
 */
proto.protobuf_unittest.TestProto3Optional.NestedMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestProto3Optional.NestedMessage;
  return proto.protobuf_unittest.TestProto3Optional.NestedMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestProto3Optional.NestedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestProto3Optional.NestedMessage}
 */
proto.protobuf_unittest.TestProto3Optional.NestedMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBb(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestProto3Optional.NestedMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestProto3Optional.NestedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestProto3Optional.NestedMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestProto3Optional.NestedMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 bb = 1;
 * @return {number}
 */
proto.protobuf_unittest.TestProto3Optional.NestedMessage.prototype.getBb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf_unittest.TestProto3Optional.NestedMessage} returns this
 */
proto.protobuf_unittest.TestProto3Optional.NestedMessage.prototype.setBb = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3Optional.NestedMessage} returns this
 */
proto.protobuf_unittest.TestProto3Optional.NestedMessage.prototype.clearBb = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3Optional.NestedMessage.prototype.hasBb = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 optional_int32 = 1;
 * @return {number}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getOptionalInt32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.setOptionalInt32 = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.clearOptionalInt32 = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.hasOptionalInt32 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 optional_int64 = 2;
 * @return {number}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getOptionalInt64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.setOptionalInt64 = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.clearOptionalInt64 = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.hasOptionalInt64 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 optional_uint32 = 3;
 * @return {number}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getOptionalUint32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.setOptionalUint32 = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.clearOptionalUint32 = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.hasOptionalUint32 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 optional_uint64 = 4;
 * @return {number}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getOptionalUint64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.setOptionalUint64 = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.clearOptionalUint64 = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.hasOptionalUint64 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional sint32 optional_sint32 = 5;
 * @return {number}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getOptionalSint32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.setOptionalSint32 = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.clearOptionalSint32 = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.hasOptionalSint32 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional sint64 optional_sint64 = 6;
 * @return {number}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getOptionalSint64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.setOptionalSint64 = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.clearOptionalSint64 = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.hasOptionalSint64 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional fixed32 optional_fixed32 = 7;
 * @return {number}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getOptionalFixed32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.setOptionalFixed32 = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.clearOptionalFixed32 = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.hasOptionalFixed32 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional fixed64 optional_fixed64 = 8;
 * @return {number}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getOptionalFixed64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.setOptionalFixed64 = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.clearOptionalFixed64 = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.hasOptionalFixed64 = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional sfixed32 optional_sfixed32 = 9;
 * @return {number}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getOptionalSfixed32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.setOptionalSfixed32 = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.clearOptionalSfixed32 = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.hasOptionalSfixed32 = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional sfixed64 optional_sfixed64 = 10;
 * @return {number}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getOptionalSfixed64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.setOptionalSfixed64 = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.clearOptionalSfixed64 = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.hasOptionalSfixed64 = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional float optional_float = 11;
 * @return {number}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getOptionalFloat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.setOptionalFloat = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.clearOptionalFloat = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.hasOptionalFloat = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double optional_double = 12;
 * @return {number}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getOptionalDouble = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.setOptionalDouble = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.clearOptionalDouble = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.hasOptionalDouble = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bool optional_bool = 13;
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getOptionalBool = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.setOptionalBool = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.clearOptionalBool = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.hasOptionalBool = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string optional_string = 14;
 * @return {string}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getOptionalString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.setOptionalString = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.clearOptionalString = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.hasOptionalString = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional bytes optional_bytes = 15;
 * @return {!(string|Uint8Array)}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getOptionalBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes optional_bytes = 15;
 * This is a type-conversion wrapper around `getOptionalBytes()`
 * @return {string}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getOptionalBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOptionalBytes()));
};


/**
 * optional bytes optional_bytes = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOptionalBytes()`
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getOptionalBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOptionalBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.setOptionalBytes = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.clearOptionalBytes = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.hasOptionalBytes = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional string optional_cord = 16;
 * @return {string}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getOptionalCord = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.setOptionalCord = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.clearOptionalCord = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.hasOptionalCord = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional NestedMessage optional_nested_message = 18;
 * @return {?proto.protobuf_unittest.TestProto3Optional.NestedMessage}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getOptionalNestedMessage = function() {
  return /** @type{?proto.protobuf_unittest.TestProto3Optional.NestedMessage} */ (
    jspb.Message.getWrapperField(this, proto.protobuf_unittest.TestProto3Optional.NestedMessage, 18));
};


/**
 * @param {?proto.protobuf_unittest.TestProto3Optional.NestedMessage|undefined} value
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
*/
proto.protobuf_unittest.TestProto3Optional.prototype.setOptionalNestedMessage = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.clearOptionalNestedMessage = function() {
  return this.setOptionalNestedMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.hasOptionalNestedMessage = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional NestedMessage lazy_nested_message = 19;
 * @return {?proto.protobuf_unittest.TestProto3Optional.NestedMessage}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getLazyNestedMessage = function() {
  return /** @type{?proto.protobuf_unittest.TestProto3Optional.NestedMessage} */ (
    jspb.Message.getWrapperField(this, proto.protobuf_unittest.TestProto3Optional.NestedMessage, 19));
};


/**
 * @param {?proto.protobuf_unittest.TestProto3Optional.NestedMessage|undefined} value
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
*/
proto.protobuf_unittest.TestProto3Optional.prototype.setLazyNestedMessage = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.clearLazyNestedMessage = function() {
  return this.setLazyNestedMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.hasLazyNestedMessage = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional NestedEnum optional_nested_enum = 21;
 * @return {!proto.protobuf_unittest.TestProto3Optional.NestedEnum}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getOptionalNestedEnum = function() {
  return /** @type {!proto.protobuf_unittest.TestProto3Optional.NestedEnum} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {!proto.protobuf_unittest.TestProto3Optional.NestedEnum} value
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.setOptionalNestedEnum = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.clearOptionalNestedEnum = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.hasOptionalNestedEnum = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional int32 singular_int32 = 22;
 * @return {number}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getSingularInt32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.setSingularInt32 = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional int64 singular_int64 = 23;
 * @return {number}
 */
proto.protobuf_unittest.TestProto3Optional.prototype.getSingularInt64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf_unittest.TestProto3Optional} returns this
 */
proto.protobuf_unittest.TestProto3Optional.prototype.setSingularInt64 = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestProto3OptionalMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestProto3OptionalMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestProto3OptionalMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestProto3OptionalMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    nestedMessage: (f = msg.getNestedMessage()) && proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage.toObject(includeInstance, f),
    optionalNestedMessage: (f = msg.getOptionalNestedMessage()) && proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestProto3OptionalMessage}
 */
proto.protobuf_unittest.TestProto3OptionalMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestProto3OptionalMessage;
  return proto.protobuf_unittest.TestProto3OptionalMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestProto3OptionalMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestProto3OptionalMessage}
 */
proto.protobuf_unittest.TestProto3OptionalMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage;
      reader.readMessage(value,proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage.deserializeBinaryFromReader);
      msg.setNestedMessage(value);
      break;
    case 2:
      var value = new proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage;
      reader.readMessage(value,proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage.deserializeBinaryFromReader);
      msg.setOptionalNestedMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestProto3OptionalMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestProto3OptionalMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestProto3OptionalMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestProto3OptionalMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNestedMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage.serializeBinaryToWriter
    );
  }
  f = message.getOptionalNestedMessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    s: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage}
 */
proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage;
  return proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage}
 */
proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getS();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string s = 1;
 * @return {string}
 */
proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage.prototype.getS = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage} returns this
 */
proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage.prototype.setS = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NestedMessage nested_message = 1;
 * @return {?proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage}
 */
proto.protobuf_unittest.TestProto3OptionalMessage.prototype.getNestedMessage = function() {
  return /** @type{?proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage} */ (
    jspb.Message.getWrapperField(this, proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage, 1));
};


/**
 * @param {?proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage|undefined} value
 * @return {!proto.protobuf_unittest.TestProto3OptionalMessage} returns this
*/
proto.protobuf_unittest.TestProto3OptionalMessage.prototype.setNestedMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3OptionalMessage} returns this
 */
proto.protobuf_unittest.TestProto3OptionalMessage.prototype.clearNestedMessage = function() {
  return this.setNestedMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3OptionalMessage.prototype.hasNestedMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NestedMessage optional_nested_message = 2;
 * @return {?proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage}
 */
proto.protobuf_unittest.TestProto3OptionalMessage.prototype.getOptionalNestedMessage = function() {
  return /** @type{?proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage} */ (
    jspb.Message.getWrapperField(this, proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage, 2));
};


/**
 * @param {?proto.protobuf_unittest.TestProto3OptionalMessage.NestedMessage|undefined} value
 * @return {!proto.protobuf_unittest.TestProto3OptionalMessage} returns this
*/
proto.protobuf_unittest.TestProto3OptionalMessage.prototype.setOptionalNestedMessage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protobuf_unittest.TestProto3OptionalMessage} returns this
 */
proto.protobuf_unittest.TestProto3OptionalMessage.prototype.clearOptionalNestedMessage = function() {
  return this.setOptionalNestedMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestProto3OptionalMessage.prototype.hasOptionalNestedMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.Proto3OptionalExtensions.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.Proto3OptionalExtensions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.Proto3OptionalExtensions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.Proto3OptionalExtensions.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.Proto3OptionalExtensions}
 */
proto.protobuf_unittest.Proto3OptionalExtensions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.Proto3OptionalExtensions;
  return proto.protobuf_unittest.Proto3OptionalExtensions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.Proto3OptionalExtensions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.Proto3OptionalExtensions}
 */
proto.protobuf_unittest.Proto3OptionalExtensions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.Proto3OptionalExtensions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.Proto3OptionalExtensions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.Proto3OptionalExtensions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.Proto3OptionalExtensions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `extNoOptional`.
 * @type {!jspb.ExtensionFieldInfo<number>}
 */
proto.protobuf_unittest.Proto3OptionalExtensions.extNoOptional = new jspb.ExtensionFieldInfo(
    355886728,
    {extNoOptional: 0},
    null,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         null),
    0);

google_protobuf_descriptor_pb.MessageOptions.extensionsBinary[355886728] = new jspb.ExtensionFieldBinaryInfo(
    proto.protobuf_unittest.Proto3OptionalExtensions.extNoOptional,
    jspb.BinaryReader.prototype.readInt32,
    jspb.BinaryWriter.prototype.writeInt32,
    undefined,
    undefined,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_descriptor_pb.MessageOptions.extensions[355886728] = proto.protobuf_unittest.Proto3OptionalExtensions.extNoOptional;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `extWithOptional`.
 * @type {!jspb.ExtensionFieldInfo<number>}
 */
proto.protobuf_unittest.Proto3OptionalExtensions.extWithOptional = new jspb.ExtensionFieldInfo(
    355886729,
    {extWithOptional: 0},
    null,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         null),
    0);

google_protobuf_descriptor_pb.MessageOptions.extensionsBinary[355886729] = new jspb.ExtensionFieldBinaryInfo(
    proto.protobuf_unittest.Proto3OptionalExtensions.extWithOptional,
    jspb.BinaryReader.prototype.readInt32,
    jspb.BinaryWriter.prototype.writeInt32,
    undefined,
    undefined,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_descriptor_pb.MessageOptions.extensions[355886729] = proto.protobuf_unittest.Proto3OptionalExtensions.extWithOptional;

goog.object.extend(exports, proto.protobuf_unittest);
