// source: google/protobuf/map_proto2_unittest.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_unittest_import_pb = require('google-protobuf/google/protobuf/unittest_import_pb.js');
goog.object.extend(proto, google_protobuf_unittest_import_pb);
goog.exportSymbol('proto.protobuf_unittest.Proto2MapEnum', null, global);
goog.exportSymbol('proto.protobuf_unittest.Proto2MapEnumPlusExtra', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestEnumMap', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestEnumMapPlusExtra', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestImportEnumMap', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestIntIntMap', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestMaps', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestSubmessageMaps', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestEnumMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestEnumMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestEnumMap.displayName = 'proto.protobuf_unittest.TestEnumMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestEnumMapPlusExtra = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestEnumMapPlusExtra, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestEnumMapPlusExtra.displayName = 'proto.protobuf_unittest.TestEnumMapPlusExtra';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestImportEnumMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestImportEnumMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestImportEnumMap.displayName = 'proto.protobuf_unittest.TestImportEnumMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestIntIntMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestIntIntMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestIntIntMap.displayName = 'proto.protobuf_unittest.TestIntIntMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestMaps = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestMaps, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestMaps.displayName = 'proto.protobuf_unittest.TestMaps';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestSubmessageMaps = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestSubmessageMaps, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestSubmessageMaps.displayName = 'proto.protobuf_unittest.TestSubmessageMaps';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestEnumMap.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestEnumMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestEnumMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestEnumMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    knownMapFieldMap: (f = msg.getKnownMapFieldMap()) ? f.toObject(includeInstance, undefined) : [],
    unknownMapFieldMap: (f = msg.getUnknownMapFieldMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestEnumMap}
 */
proto.protobuf_unittest.TestEnumMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestEnumMap;
  return proto.protobuf_unittest.TestEnumMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestEnumMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestEnumMap}
 */
proto.protobuf_unittest.TestEnumMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 101:
      var value = msg.getKnownMapFieldMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readEnum, null, 0, 0);
         });
      break;
    case 102:
      var value = msg.getUnknownMapFieldMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readEnum, null, 0, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestEnumMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestEnumMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestEnumMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestEnumMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKnownMapFieldMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(101, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeEnum);
  }
  f = message.getUnknownMapFieldMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(102, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeEnum);
  }
};


/**
 * map<int32, Proto2MapEnum> known_map_field = 101;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.Proto2MapEnum>}
 */
proto.protobuf_unittest.TestEnumMap.prototype.getKnownMapFieldMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.Proto2MapEnum>} */ (
      jspb.Message.getMapField(this, 101, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestEnumMap} returns this
 */
proto.protobuf_unittest.TestEnumMap.prototype.clearKnownMapFieldMap = function() {
  this.getKnownMapFieldMap().clear();
  return this;};


/**
 * map<int32, Proto2MapEnum> unknown_map_field = 102;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.Proto2MapEnum>}
 */
proto.protobuf_unittest.TestEnumMap.prototype.getUnknownMapFieldMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.Proto2MapEnum>} */ (
      jspb.Message.getMapField(this, 102, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestEnumMap} returns this
 */
proto.protobuf_unittest.TestEnumMap.prototype.clearUnknownMapFieldMap = function() {
  this.getUnknownMapFieldMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestEnumMapPlusExtra.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestEnumMapPlusExtra.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestEnumMapPlusExtra} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestEnumMapPlusExtra.toObject = function(includeInstance, msg) {
  var f, obj = {
    knownMapFieldMap: (f = msg.getKnownMapFieldMap()) ? f.toObject(includeInstance, undefined) : [],
    unknownMapFieldMap: (f = msg.getUnknownMapFieldMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestEnumMapPlusExtra}
 */
proto.protobuf_unittest.TestEnumMapPlusExtra.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestEnumMapPlusExtra;
  return proto.protobuf_unittest.TestEnumMapPlusExtra.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestEnumMapPlusExtra} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestEnumMapPlusExtra}
 */
proto.protobuf_unittest.TestEnumMapPlusExtra.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 101:
      var value = msg.getKnownMapFieldMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readEnum, null, 0, 0);
         });
      break;
    case 102:
      var value = msg.getUnknownMapFieldMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readEnum, null, 0, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestEnumMapPlusExtra.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestEnumMapPlusExtra.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestEnumMapPlusExtra} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestEnumMapPlusExtra.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKnownMapFieldMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(101, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeEnum);
  }
  f = message.getUnknownMapFieldMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(102, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeEnum);
  }
};


/**
 * map<int32, Proto2MapEnumPlusExtra> known_map_field = 101;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.Proto2MapEnumPlusExtra>}
 */
proto.protobuf_unittest.TestEnumMapPlusExtra.prototype.getKnownMapFieldMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.Proto2MapEnumPlusExtra>} */ (
      jspb.Message.getMapField(this, 101, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestEnumMapPlusExtra} returns this
 */
proto.protobuf_unittest.TestEnumMapPlusExtra.prototype.clearKnownMapFieldMap = function() {
  this.getKnownMapFieldMap().clear();
  return this;};


/**
 * map<int32, Proto2MapEnumPlusExtra> unknown_map_field = 102;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.Proto2MapEnumPlusExtra>}
 */
proto.protobuf_unittest.TestEnumMapPlusExtra.prototype.getUnknownMapFieldMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.Proto2MapEnumPlusExtra>} */ (
      jspb.Message.getMapField(this, 102, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestEnumMapPlusExtra} returns this
 */
proto.protobuf_unittest.TestEnumMapPlusExtra.prototype.clearUnknownMapFieldMap = function() {
  this.getUnknownMapFieldMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestImportEnumMap.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestImportEnumMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestImportEnumMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestImportEnumMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    importEnumAmpMap: (f = msg.getImportEnumAmpMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestImportEnumMap}
 */
proto.protobuf_unittest.TestImportEnumMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestImportEnumMap;
  return proto.protobuf_unittest.TestImportEnumMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestImportEnumMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestImportEnumMap}
 */
proto.protobuf_unittest.TestImportEnumMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getImportEnumAmpMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readEnum, null, 0, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestImportEnumMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestImportEnumMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestImportEnumMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestImportEnumMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImportEnumAmpMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeEnum);
  }
};


/**
 * map<int32, protobuf_unittest_import.ImportEnumForMap> import_enum_amp = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest_import.ImportEnumForMap>}
 */
proto.protobuf_unittest.TestImportEnumMap.prototype.getImportEnumAmpMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest_import.ImportEnumForMap>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestImportEnumMap} returns this
 */
proto.protobuf_unittest.TestImportEnumMap.prototype.clearImportEnumAmpMap = function() {
  this.getImportEnumAmpMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestIntIntMap.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestIntIntMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestIntIntMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestIntIntMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    mMap: (f = msg.getMMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestIntIntMap}
 */
proto.protobuf_unittest.TestIntIntMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestIntIntMap;
  return proto.protobuf_unittest.TestIntIntMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestIntIntMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestIntIntMap}
 */
proto.protobuf_unittest.TestIntIntMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt32, null, 0, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestIntIntMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestIntIntMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestIntIntMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestIntIntMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt32);
  }
};


/**
 * map<int32, int32> m = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestIntIntMap.prototype.getMMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestIntIntMap} returns this
 */
proto.protobuf_unittest.TestIntIntMap.prototype.clearMMap = function() {
  this.getMMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestMaps.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestMaps.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestMaps} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestMaps.toObject = function(includeInstance, msg) {
  var f, obj = {
    mInt32Map: (f = msg.getMInt32Map()) ? f.toObject(includeInstance, proto.protobuf_unittest.TestIntIntMap.toObject) : [],
    mInt64Map: (f = msg.getMInt64Map()) ? f.toObject(includeInstance, proto.protobuf_unittest.TestIntIntMap.toObject) : [],
    mUint32Map: (f = msg.getMUint32Map()) ? f.toObject(includeInstance, proto.protobuf_unittest.TestIntIntMap.toObject) : [],
    mUint64Map: (f = msg.getMUint64Map()) ? f.toObject(includeInstance, proto.protobuf_unittest.TestIntIntMap.toObject) : [],
    mSint32Map: (f = msg.getMSint32Map()) ? f.toObject(includeInstance, proto.protobuf_unittest.TestIntIntMap.toObject) : [],
    mSint64Map: (f = msg.getMSint64Map()) ? f.toObject(includeInstance, proto.protobuf_unittest.TestIntIntMap.toObject) : [],
    mFixed32Map: (f = msg.getMFixed32Map()) ? f.toObject(includeInstance, proto.protobuf_unittest.TestIntIntMap.toObject) : [],
    mFixed64Map: (f = msg.getMFixed64Map()) ? f.toObject(includeInstance, proto.protobuf_unittest.TestIntIntMap.toObject) : [],
    mSfixed32Map: (f = msg.getMSfixed32Map()) ? f.toObject(includeInstance, proto.protobuf_unittest.TestIntIntMap.toObject) : [],
    mSfixed64Map: (f = msg.getMSfixed64Map()) ? f.toObject(includeInstance, proto.protobuf_unittest.TestIntIntMap.toObject) : [],
    mBoolMap: (f = msg.getMBoolMap()) ? f.toObject(includeInstance, proto.protobuf_unittest.TestIntIntMap.toObject) : [],
    mStringMap: (f = msg.getMStringMap()) ? f.toObject(includeInstance, proto.protobuf_unittest.TestIntIntMap.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestMaps}
 */
proto.protobuf_unittest.TestMaps.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestMaps;
  return proto.protobuf_unittest.TestMaps.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestMaps} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestMaps}
 */
proto.protobuf_unittest.TestMaps.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMInt32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.TestIntIntMap.deserializeBinaryFromReader, 0, new proto.protobuf_unittest.TestIntIntMap());
         });
      break;
    case 2:
      var value = msg.getMInt64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt64, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.TestIntIntMap.deserializeBinaryFromReader, 0, new proto.protobuf_unittest.TestIntIntMap());
         });
      break;
    case 3:
      var value = msg.getMUint32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.TestIntIntMap.deserializeBinaryFromReader, 0, new proto.protobuf_unittest.TestIntIntMap());
         });
      break;
    case 4:
      var value = msg.getMUint64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.TestIntIntMap.deserializeBinaryFromReader, 0, new proto.protobuf_unittest.TestIntIntMap());
         });
      break;
    case 5:
      var value = msg.getMSint32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSint32, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.TestIntIntMap.deserializeBinaryFromReader, 0, new proto.protobuf_unittest.TestIntIntMap());
         });
      break;
    case 6:
      var value = msg.getMSint64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSint64, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.TestIntIntMap.deserializeBinaryFromReader, 0, new proto.protobuf_unittest.TestIntIntMap());
         });
      break;
    case 7:
      var value = msg.getMFixed32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readFixed32, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.TestIntIntMap.deserializeBinaryFromReader, 0, new proto.protobuf_unittest.TestIntIntMap());
         });
      break;
    case 8:
      var value = msg.getMFixed64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readFixed64, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.TestIntIntMap.deserializeBinaryFromReader, 0, new proto.protobuf_unittest.TestIntIntMap());
         });
      break;
    case 9:
      var value = msg.getMSfixed32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSfixed32, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.TestIntIntMap.deserializeBinaryFromReader, 0, new proto.protobuf_unittest.TestIntIntMap());
         });
      break;
    case 10:
      var value = msg.getMSfixed64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSfixed64, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.TestIntIntMap.deserializeBinaryFromReader, 0, new proto.protobuf_unittest.TestIntIntMap());
         });
      break;
    case 11:
      var value = msg.getMBoolMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readBool, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.TestIntIntMap.deserializeBinaryFromReader, false, new proto.protobuf_unittest.TestIntIntMap());
         });
      break;
    case 12:
      var value = msg.getMStringMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.TestIntIntMap.deserializeBinaryFromReader, "", new proto.protobuf_unittest.TestIntIntMap());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestMaps.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestMaps.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestMaps} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestMaps.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMInt32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.TestIntIntMap.serializeBinaryToWriter);
  }
  f = message.getMInt64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeInt64, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.TestIntIntMap.serializeBinaryToWriter);
  }
  f = message.getMUint32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.TestIntIntMap.serializeBinaryToWriter);
  }
  f = message.getMUint64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.TestIntIntMap.serializeBinaryToWriter);
  }
  f = message.getMSint32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeSint32, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.TestIntIntMap.serializeBinaryToWriter);
  }
  f = message.getMSint64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeSint64, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.TestIntIntMap.serializeBinaryToWriter);
  }
  f = message.getMFixed32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeFixed32, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.TestIntIntMap.serializeBinaryToWriter);
  }
  f = message.getMFixed64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeFixed64, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.TestIntIntMap.serializeBinaryToWriter);
  }
  f = message.getMSfixed32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeSfixed32, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.TestIntIntMap.serializeBinaryToWriter);
  }
  f = message.getMSfixed64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeSfixed64, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.TestIntIntMap.serializeBinaryToWriter);
  }
  f = message.getMBoolMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeBool, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.TestIntIntMap.serializeBinaryToWriter);
  }
  f = message.getMStringMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.TestIntIntMap.serializeBinaryToWriter);
  }
};


/**
 * map<int32, TestIntIntMap> m_int32 = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.TestIntIntMap>}
 */
proto.protobuf_unittest.TestMaps.prototype.getMInt32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.TestIntIntMap>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.protobuf_unittest.TestIntIntMap));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMaps} returns this
 */
proto.protobuf_unittest.TestMaps.prototype.clearMInt32Map = function() {
  this.getMInt32Map().clear();
  return this;};


/**
 * map<int64, TestIntIntMap> m_int64 = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.TestIntIntMap>}
 */
proto.protobuf_unittest.TestMaps.prototype.getMInt64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.TestIntIntMap>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.protobuf_unittest.TestIntIntMap));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMaps} returns this
 */
proto.protobuf_unittest.TestMaps.prototype.clearMInt64Map = function() {
  this.getMInt64Map().clear();
  return this;};


/**
 * map<uint32, TestIntIntMap> m_uint32 = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.TestIntIntMap>}
 */
proto.protobuf_unittest.TestMaps.prototype.getMUint32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.TestIntIntMap>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.protobuf_unittest.TestIntIntMap));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMaps} returns this
 */
proto.protobuf_unittest.TestMaps.prototype.clearMUint32Map = function() {
  this.getMUint32Map().clear();
  return this;};


/**
 * map<uint64, TestIntIntMap> m_uint64 = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.TestIntIntMap>}
 */
proto.protobuf_unittest.TestMaps.prototype.getMUint64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.TestIntIntMap>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.protobuf_unittest.TestIntIntMap));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMaps} returns this
 */
proto.protobuf_unittest.TestMaps.prototype.clearMUint64Map = function() {
  this.getMUint64Map().clear();
  return this;};


/**
 * map<sint32, TestIntIntMap> m_sint32 = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.TestIntIntMap>}
 */
proto.protobuf_unittest.TestMaps.prototype.getMSint32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.TestIntIntMap>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.protobuf_unittest.TestIntIntMap));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMaps} returns this
 */
proto.protobuf_unittest.TestMaps.prototype.clearMSint32Map = function() {
  this.getMSint32Map().clear();
  return this;};


/**
 * map<sint64, TestIntIntMap> m_sint64 = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.TestIntIntMap>}
 */
proto.protobuf_unittest.TestMaps.prototype.getMSint64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.TestIntIntMap>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.protobuf_unittest.TestIntIntMap));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMaps} returns this
 */
proto.protobuf_unittest.TestMaps.prototype.clearMSint64Map = function() {
  this.getMSint64Map().clear();
  return this;};


/**
 * map<fixed32, TestIntIntMap> m_fixed32 = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.TestIntIntMap>}
 */
proto.protobuf_unittest.TestMaps.prototype.getMFixed32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.TestIntIntMap>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      proto.protobuf_unittest.TestIntIntMap));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMaps} returns this
 */
proto.protobuf_unittest.TestMaps.prototype.clearMFixed32Map = function() {
  this.getMFixed32Map().clear();
  return this;};


/**
 * map<fixed64, TestIntIntMap> m_fixed64 = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.TestIntIntMap>}
 */
proto.protobuf_unittest.TestMaps.prototype.getMFixed64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.TestIntIntMap>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      proto.protobuf_unittest.TestIntIntMap));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMaps} returns this
 */
proto.protobuf_unittest.TestMaps.prototype.clearMFixed64Map = function() {
  this.getMFixed64Map().clear();
  return this;};


/**
 * map<sfixed32, TestIntIntMap> m_sfixed32 = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.TestIntIntMap>}
 */
proto.protobuf_unittest.TestMaps.prototype.getMSfixed32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.TestIntIntMap>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      proto.protobuf_unittest.TestIntIntMap));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMaps} returns this
 */
proto.protobuf_unittest.TestMaps.prototype.clearMSfixed32Map = function() {
  this.getMSfixed32Map().clear();
  return this;};


/**
 * map<sfixed64, TestIntIntMap> m_sfixed64 = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.TestIntIntMap>}
 */
proto.protobuf_unittest.TestMaps.prototype.getMSfixed64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.TestIntIntMap>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      proto.protobuf_unittest.TestIntIntMap));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMaps} returns this
 */
proto.protobuf_unittest.TestMaps.prototype.clearMSfixed64Map = function() {
  this.getMSfixed64Map().clear();
  return this;};


/**
 * map<bool, TestIntIntMap> m_bool = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<boolean,!proto.protobuf_unittest.TestIntIntMap>}
 */
proto.protobuf_unittest.TestMaps.prototype.getMBoolMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<boolean,!proto.protobuf_unittest.TestIntIntMap>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      proto.protobuf_unittest.TestIntIntMap));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMaps} returns this
 */
proto.protobuf_unittest.TestMaps.prototype.clearMBoolMap = function() {
  this.getMBoolMap().clear();
  return this;};


/**
 * map<string, TestIntIntMap> m_string = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.protobuf_unittest.TestIntIntMap>}
 */
proto.protobuf_unittest.TestMaps.prototype.getMStringMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.protobuf_unittest.TestIntIntMap>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      proto.protobuf_unittest.TestIntIntMap));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMaps} returns this
 */
proto.protobuf_unittest.TestMaps.prototype.clearMStringMap = function() {
  this.getMStringMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestSubmessageMaps.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestSubmessageMaps.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestSubmessageMaps} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestSubmessageMaps.toObject = function(includeInstance, msg) {
  var f, obj = {
    m: (f = msg.getM()) && proto.protobuf_unittest.TestMaps.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestSubmessageMaps}
 */
proto.protobuf_unittest.TestSubmessageMaps.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestSubmessageMaps;
  return proto.protobuf_unittest.TestSubmessageMaps.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestSubmessageMaps} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestSubmessageMaps}
 */
proto.protobuf_unittest.TestSubmessageMaps.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobuf_unittest.TestMaps;
      reader.readMessage(value,proto.protobuf_unittest.TestMaps.deserializeBinaryFromReader);
      msg.setM(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestSubmessageMaps.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestSubmessageMaps.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestSubmessageMaps} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestSubmessageMaps.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getM();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protobuf_unittest.TestMaps.serializeBinaryToWriter
    );
  }
};


/**
 * optional TestMaps m = 1;
 * @return {?proto.protobuf_unittest.TestMaps}
 */
proto.protobuf_unittest.TestSubmessageMaps.prototype.getM = function() {
  return /** @type{?proto.protobuf_unittest.TestMaps} */ (
    jspb.Message.getWrapperField(this, proto.protobuf_unittest.TestMaps, 1));
};


/**
 * @param {?proto.protobuf_unittest.TestMaps|undefined} value
 * @return {!proto.protobuf_unittest.TestSubmessageMaps} returns this
*/
proto.protobuf_unittest.TestSubmessageMaps.prototype.setM = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protobuf_unittest.TestSubmessageMaps} returns this
 */
proto.protobuf_unittest.TestSubmessageMaps.prototype.clearM = function() {
  return this.setM(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestSubmessageMaps.prototype.hasM = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.protobuf_unittest.Proto2MapEnum = {
  PROTO2_MAP_ENUM_FOO: 0,
  PROTO2_MAP_ENUM_BAR: 1,
  PROTO2_MAP_ENUM_BAZ: 2
};

/**
 * @enum {number}
 */
proto.protobuf_unittest.Proto2MapEnumPlusExtra = {
  E_PROTO2_MAP_ENUM_FOO: 0,
  E_PROTO2_MAP_ENUM_BAR: 1,
  E_PROTO2_MAP_ENUM_BAZ: 2,
  E_PROTO2_MAP_ENUM_EXTRA: 3
};

goog.object.extend(exports, proto.protobuf_unittest);
