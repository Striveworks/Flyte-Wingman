// source: google/protobuf/map_unittest.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_unittest_pb = require('google-protobuf/google/protobuf/unittest_pb.js');
goog.object.extend(proto, google_protobuf_unittest_pb);
goog.exportSymbol('proto.protobuf_unittest.MapEnum', null, global);
goog.exportSymbol('proto.protobuf_unittest.MessageContainingEnumCalledType', null, global);
goog.exportSymbol('proto.protobuf_unittest.MessageContainingEnumCalledType.Type', null, global);
goog.exportSymbol('proto.protobuf_unittest.MessageContainingMapCalledEntry', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestArenaMap', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestMap', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestMapSubmessage', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestMessageMap', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestRecursiveMapMessage', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestRequiredMessageMap', null, global);
goog.exportSymbol('proto.protobuf_unittest.TestSameTypeMap', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestMap.displayName = 'proto.protobuf_unittest.TestMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestMapSubmessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestMapSubmessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestMapSubmessage.displayName = 'proto.protobuf_unittest.TestMapSubmessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestMessageMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestMessageMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestMessageMap.displayName = 'proto.protobuf_unittest.TestMessageMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestSameTypeMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestSameTypeMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestSameTypeMap.displayName = 'proto.protobuf_unittest.TestSameTypeMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestRequiredMessageMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestRequiredMessageMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestRequiredMessageMap.displayName = 'proto.protobuf_unittest.TestRequiredMessageMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestArenaMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestArenaMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestArenaMap.displayName = 'proto.protobuf_unittest.TestArenaMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.MessageContainingEnumCalledType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.MessageContainingEnumCalledType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.MessageContainingEnumCalledType.displayName = 'proto.protobuf_unittest.MessageContainingEnumCalledType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.MessageContainingMapCalledEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.MessageContainingMapCalledEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.MessageContainingMapCalledEntry.displayName = 'proto.protobuf_unittest.MessageContainingMapCalledEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf_unittest.TestRecursiveMapMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf_unittest.TestRecursiveMapMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf_unittest.TestRecursiveMapMessage.displayName = 'proto.protobuf_unittest.TestRecursiveMapMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestMap.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    mapInt32Int32Map: (f = msg.getMapInt32Int32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapInt64Int64Map: (f = msg.getMapInt64Int64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapUint32Uint32Map: (f = msg.getMapUint32Uint32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapUint64Uint64Map: (f = msg.getMapUint64Uint64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapSint32Sint32Map: (f = msg.getMapSint32Sint32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapSint64Sint64Map: (f = msg.getMapSint64Sint64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapFixed32Fixed32Map: (f = msg.getMapFixed32Fixed32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapFixed64Fixed64Map: (f = msg.getMapFixed64Fixed64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapSfixed32Sfixed32Map: (f = msg.getMapSfixed32Sfixed32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapSfixed64Sfixed64Map: (f = msg.getMapSfixed64Sfixed64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32FloatMap: (f = msg.getMapInt32FloatMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32DoubleMap: (f = msg.getMapInt32DoubleMap()) ? f.toObject(includeInstance, undefined) : [],
    mapBoolBoolMap: (f = msg.getMapBoolBoolMap()) ? f.toObject(includeInstance, undefined) : [],
    mapStringStringMap: (f = msg.getMapStringStringMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32BytesMap: (f = msg.getMapInt32BytesMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32EnumMap: (f = msg.getMapInt32EnumMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32ForeignMessageMap: (f = msg.getMapInt32ForeignMessageMap()) ? f.toObject(includeInstance, proto.protobuf_unittest.ForeignMessage.toObject) : [],
    mapStringForeignMessageMap: (f = msg.getMapStringForeignMessageMap()) ? f.toObject(includeInstance, proto.protobuf_unittest.ForeignMessage.toObject) : [],
    mapInt32AllTypesMap: (f = msg.getMapInt32AllTypesMap()) ? f.toObject(includeInstance, proto.protobuf_unittest.TestAllTypes.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestMap}
 */
proto.protobuf_unittest.TestMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestMap;
  return proto.protobuf_unittest.TestMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestMap}
 */
proto.protobuf_unittest.TestMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMapInt32Int32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt32, null, 0, 0);
         });
      break;
    case 2:
      var value = msg.getMapInt64Int64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt64, jspb.BinaryReader.prototype.readInt64, null, 0, 0);
         });
      break;
    case 3:
      var value = msg.getMapUint32Uint32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32, null, 0, 0);
         });
      break;
    case 4:
      var value = msg.getMapUint64Uint64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readUint64, null, 0, 0);
         });
      break;
    case 5:
      var value = msg.getMapSint32Sint32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSint32, jspb.BinaryReader.prototype.readSint32, null, 0, 0);
         });
      break;
    case 6:
      var value = msg.getMapSint64Sint64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSint64, jspb.BinaryReader.prototype.readSint64, null, 0, 0);
         });
      break;
    case 7:
      var value = msg.getMapFixed32Fixed32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readFixed32, jspb.BinaryReader.prototype.readFixed32, null, 0, 0);
         });
      break;
    case 8:
      var value = msg.getMapFixed64Fixed64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readFixed64, jspb.BinaryReader.prototype.readFixed64, null, 0, 0);
         });
      break;
    case 9:
      var value = msg.getMapSfixed32Sfixed32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSfixed32, jspb.BinaryReader.prototype.readSfixed32, null, 0, 0);
         });
      break;
    case 10:
      var value = msg.getMapSfixed64Sfixed64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSfixed64, jspb.BinaryReader.prototype.readSfixed64, null, 0, 0);
         });
      break;
    case 11:
      var value = msg.getMapInt32FloatMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readFloat, null, 0, 0.0);
         });
      break;
    case 12:
      var value = msg.getMapInt32DoubleMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readDouble, null, 0, 0.0);
         });
      break;
    case 13:
      var value = msg.getMapBoolBoolMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readBool, jspb.BinaryReader.prototype.readBool, null, false, false);
         });
      break;
    case 14:
      var value = msg.getMapStringStringMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 15:
      var value = msg.getMapInt32BytesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readBytes, null, 0, "");
         });
      break;
    case 16:
      var value = msg.getMapInt32EnumMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readEnum, null, 0, 0);
         });
      break;
    case 17:
      var value = msg.getMapInt32ForeignMessageMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.ForeignMessage.deserializeBinaryFromReader, 0, new proto.protobuf_unittest.ForeignMessage());
         });
      break;
    case 18:
      var value = msg.getMapStringForeignMessageMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.ForeignMessage.deserializeBinaryFromReader, "", new proto.protobuf_unittest.ForeignMessage());
         });
      break;
    case 19:
      var value = msg.getMapInt32AllTypesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.TestAllTypes.deserializeBinaryFromReader, 0, new proto.protobuf_unittest.TestAllTypes());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMapInt32Int32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getMapInt64Int64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeInt64, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getMapUint32Uint32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getMapUint64Uint64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getMapSint32Sint32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeSint32, jspb.BinaryWriter.prototype.writeSint32);
  }
  f = message.getMapSint64Sint64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeSint64, jspb.BinaryWriter.prototype.writeSint64);
  }
  f = message.getMapFixed32Fixed32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeFixed32, jspb.BinaryWriter.prototype.writeFixed32);
  }
  f = message.getMapFixed64Fixed64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeFixed64, jspb.BinaryWriter.prototype.writeFixed64);
  }
  f = message.getMapSfixed32Sfixed32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeSfixed32, jspb.BinaryWriter.prototype.writeSfixed32);
  }
  f = message.getMapSfixed64Sfixed64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeSfixed64, jspb.BinaryWriter.prototype.writeSfixed64);
  }
  f = message.getMapInt32FloatMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeFloat);
  }
  f = message.getMapInt32DoubleMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeDouble);
  }
  f = message.getMapBoolBoolMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(13, writer, jspb.BinaryWriter.prototype.writeBool, jspb.BinaryWriter.prototype.writeBool);
  }
  f = message.getMapStringStringMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(14, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMapInt32BytesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getMapInt32EnumMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(16, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeEnum);
  }
  f = message.getMapInt32ForeignMessageMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(17, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.ForeignMessage.serializeBinaryToWriter);
  }
  f = message.getMapStringForeignMessageMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(18, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.ForeignMessage.serializeBinaryToWriter);
  }
  f = message.getMapInt32AllTypesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(19, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.TestAllTypes.serializeBinaryToWriter);
  }
};


/**
 * map<int32, int32> map_int32_int32 = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMap.prototype.getMapInt32Int32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMap} returns this
 */
proto.protobuf_unittest.TestMap.prototype.clearMapInt32Int32Map = function() {
  this.getMapInt32Int32Map().clear();
  return this;};


/**
 * map<int64, int64> map_int64_int64 = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMap.prototype.getMapInt64Int64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMap} returns this
 */
proto.protobuf_unittest.TestMap.prototype.clearMapInt64Int64Map = function() {
  this.getMapInt64Int64Map().clear();
  return this;};


/**
 * map<uint32, uint32> map_uint32_uint32 = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMap.prototype.getMapUint32Uint32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMap} returns this
 */
proto.protobuf_unittest.TestMap.prototype.clearMapUint32Uint32Map = function() {
  this.getMapUint32Uint32Map().clear();
  return this;};


/**
 * map<uint64, uint64> map_uint64_uint64 = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMap.prototype.getMapUint64Uint64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMap} returns this
 */
proto.protobuf_unittest.TestMap.prototype.clearMapUint64Uint64Map = function() {
  this.getMapUint64Uint64Map().clear();
  return this;};


/**
 * map<sint32, sint32> map_sint32_sint32 = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMap.prototype.getMapSint32Sint32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMap} returns this
 */
proto.protobuf_unittest.TestMap.prototype.clearMapSint32Sint32Map = function() {
  this.getMapSint32Sint32Map().clear();
  return this;};


/**
 * map<sint64, sint64> map_sint64_sint64 = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMap.prototype.getMapSint64Sint64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMap} returns this
 */
proto.protobuf_unittest.TestMap.prototype.clearMapSint64Sint64Map = function() {
  this.getMapSint64Sint64Map().clear();
  return this;};


/**
 * map<fixed32, fixed32> map_fixed32_fixed32 = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMap.prototype.getMapFixed32Fixed32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMap} returns this
 */
proto.protobuf_unittest.TestMap.prototype.clearMapFixed32Fixed32Map = function() {
  this.getMapFixed32Fixed32Map().clear();
  return this;};


/**
 * map<fixed64, fixed64> map_fixed64_fixed64 = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMap.prototype.getMapFixed64Fixed64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMap} returns this
 */
proto.protobuf_unittest.TestMap.prototype.clearMapFixed64Fixed64Map = function() {
  this.getMapFixed64Fixed64Map().clear();
  return this;};


/**
 * map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMap.prototype.getMapSfixed32Sfixed32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMap} returns this
 */
proto.protobuf_unittest.TestMap.prototype.clearMapSfixed32Sfixed32Map = function() {
  this.getMapSfixed32Sfixed32Map().clear();
  return this;};


/**
 * map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMap.prototype.getMapSfixed64Sfixed64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMap} returns this
 */
proto.protobuf_unittest.TestMap.prototype.clearMapSfixed64Sfixed64Map = function() {
  this.getMapSfixed64Sfixed64Map().clear();
  return this;};


/**
 * map<int32, float> map_int32_float = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMap.prototype.getMapInt32FloatMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMap} returns this
 */
proto.protobuf_unittest.TestMap.prototype.clearMapInt32FloatMap = function() {
  this.getMapInt32FloatMap().clear();
  return this;};


/**
 * map<int32, double> map_int32_double = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestMap.prototype.getMapInt32DoubleMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMap} returns this
 */
proto.protobuf_unittest.TestMap.prototype.clearMapInt32DoubleMap = function() {
  this.getMapInt32DoubleMap().clear();
  return this;};


/**
 * map<bool, bool> map_bool_bool = 13;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<boolean,boolean>}
 */
proto.protobuf_unittest.TestMap.prototype.getMapBoolBoolMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<boolean,boolean>} */ (
      jspb.Message.getMapField(this, 13, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMap} returns this
 */
proto.protobuf_unittest.TestMap.prototype.clearMapBoolBoolMap = function() {
  this.getMapBoolBoolMap().clear();
  return this;};


/**
 * map<string, string> map_string_string = 14;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.protobuf_unittest.TestMap.prototype.getMapStringStringMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 14, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMap} returns this
 */
proto.protobuf_unittest.TestMap.prototype.clearMapStringStringMap = function() {
  this.getMapStringStringMap().clear();
  return this;};


/**
 * map<int32, bytes> map_int32_bytes = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!(string|Uint8Array)>}
 */
proto.protobuf_unittest.TestMap.prototype.getMapInt32BytesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMap} returns this
 */
proto.protobuf_unittest.TestMap.prototype.clearMapInt32BytesMap = function() {
  this.getMapInt32BytesMap().clear();
  return this;};


/**
 * map<int32, MapEnum> map_int32_enum = 16;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.MapEnum>}
 */
proto.protobuf_unittest.TestMap.prototype.getMapInt32EnumMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.MapEnum>} */ (
      jspb.Message.getMapField(this, 16, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMap} returns this
 */
proto.protobuf_unittest.TestMap.prototype.clearMapInt32EnumMap = function() {
  this.getMapInt32EnumMap().clear();
  return this;};


/**
 * map<int32, ForeignMessage> map_int32_foreign_message = 17;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.ForeignMessage>}
 */
proto.protobuf_unittest.TestMap.prototype.getMapInt32ForeignMessageMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.ForeignMessage>} */ (
      jspb.Message.getMapField(this, 17, opt_noLazyCreate,
      proto.protobuf_unittest.ForeignMessage));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMap} returns this
 */
proto.protobuf_unittest.TestMap.prototype.clearMapInt32ForeignMessageMap = function() {
  this.getMapInt32ForeignMessageMap().clear();
  return this;};


/**
 * map<string, ForeignMessage> map_string_foreign_message = 18;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.protobuf_unittest.ForeignMessage>}
 */
proto.protobuf_unittest.TestMap.prototype.getMapStringForeignMessageMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.protobuf_unittest.ForeignMessage>} */ (
      jspb.Message.getMapField(this, 18, opt_noLazyCreate,
      proto.protobuf_unittest.ForeignMessage));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMap} returns this
 */
proto.protobuf_unittest.TestMap.prototype.clearMapStringForeignMessageMap = function() {
  this.getMapStringForeignMessageMap().clear();
  return this;};


/**
 * map<int32, TestAllTypes> map_int32_all_types = 19;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.TestAllTypes>}
 */
proto.protobuf_unittest.TestMap.prototype.getMapInt32AllTypesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.TestAllTypes>} */ (
      jspb.Message.getMapField(this, 19, opt_noLazyCreate,
      proto.protobuf_unittest.TestAllTypes));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMap} returns this
 */
proto.protobuf_unittest.TestMap.prototype.clearMapInt32AllTypesMap = function() {
  this.getMapInt32AllTypesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestMapSubmessage.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestMapSubmessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestMapSubmessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestMapSubmessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    testMap: (f = msg.getTestMap()) && proto.protobuf_unittest.TestMap.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestMapSubmessage}
 */
proto.protobuf_unittest.TestMapSubmessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestMapSubmessage;
  return proto.protobuf_unittest.TestMapSubmessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestMapSubmessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestMapSubmessage}
 */
proto.protobuf_unittest.TestMapSubmessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobuf_unittest.TestMap;
      reader.readMessage(value,proto.protobuf_unittest.TestMap.deserializeBinaryFromReader);
      msg.setTestMap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestMapSubmessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestMapSubmessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestMapSubmessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestMapSubmessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTestMap();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protobuf_unittest.TestMap.serializeBinaryToWriter
    );
  }
};


/**
 * optional TestMap test_map = 1;
 * @return {?proto.protobuf_unittest.TestMap}
 */
proto.protobuf_unittest.TestMapSubmessage.prototype.getTestMap = function() {
  return /** @type{?proto.protobuf_unittest.TestMap} */ (
    jspb.Message.getWrapperField(this, proto.protobuf_unittest.TestMap, 1));
};


/**
 * @param {?proto.protobuf_unittest.TestMap|undefined} value
 * @return {!proto.protobuf_unittest.TestMapSubmessage} returns this
*/
proto.protobuf_unittest.TestMapSubmessage.prototype.setTestMap = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protobuf_unittest.TestMapSubmessage} returns this
 */
proto.protobuf_unittest.TestMapSubmessage.prototype.clearTestMap = function() {
  return this.setTestMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf_unittest.TestMapSubmessage.prototype.hasTestMap = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestMessageMap.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestMessageMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestMessageMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestMessageMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    mapInt32MessageMap: (f = msg.getMapInt32MessageMap()) ? f.toObject(includeInstance, proto.protobuf_unittest.TestAllTypes.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestMessageMap}
 */
proto.protobuf_unittest.TestMessageMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestMessageMap;
  return proto.protobuf_unittest.TestMessageMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestMessageMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestMessageMap}
 */
proto.protobuf_unittest.TestMessageMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMapInt32MessageMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.TestAllTypes.deserializeBinaryFromReader, 0, new proto.protobuf_unittest.TestAllTypes());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestMessageMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestMessageMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestMessageMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestMessageMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMapInt32MessageMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.TestAllTypes.serializeBinaryToWriter);
  }
};


/**
 * map<int32, TestAllTypes> map_int32_message = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.TestAllTypes>}
 */
proto.protobuf_unittest.TestMessageMap.prototype.getMapInt32MessageMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.TestAllTypes>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.protobuf_unittest.TestAllTypes));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestMessageMap} returns this
 */
proto.protobuf_unittest.TestMessageMap.prototype.clearMapInt32MessageMap = function() {
  this.getMapInt32MessageMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestSameTypeMap.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestSameTypeMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestSameTypeMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestSameTypeMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    map1Map: (f = msg.getMap1Map()) ? f.toObject(includeInstance, undefined) : [],
    map2Map: (f = msg.getMap2Map()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestSameTypeMap}
 */
proto.protobuf_unittest.TestSameTypeMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestSameTypeMap;
  return proto.protobuf_unittest.TestSameTypeMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestSameTypeMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestSameTypeMap}
 */
proto.protobuf_unittest.TestSameTypeMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMap1Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt32, null, 0, 0);
         });
      break;
    case 2:
      var value = msg.getMap2Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt32, null, 0, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestSameTypeMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestSameTypeMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestSameTypeMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestSameTypeMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMap1Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getMap2Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt32);
  }
};


/**
 * map<int32, int32> map1 = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestSameTypeMap.prototype.getMap1Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestSameTypeMap} returns this
 */
proto.protobuf_unittest.TestSameTypeMap.prototype.clearMap1Map = function() {
  this.getMap1Map().clear();
  return this;};


/**
 * map<int32, int32> map2 = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestSameTypeMap.prototype.getMap2Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestSameTypeMap} returns this
 */
proto.protobuf_unittest.TestSameTypeMap.prototype.clearMap2Map = function() {
  this.getMap2Map().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestRequiredMessageMap.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestRequiredMessageMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestRequiredMessageMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestRequiredMessageMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    mapFieldMap: (f = msg.getMapFieldMap()) ? f.toObject(includeInstance, proto.protobuf_unittest.TestRequired.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestRequiredMessageMap}
 */
proto.protobuf_unittest.TestRequiredMessageMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestRequiredMessageMap;
  return proto.protobuf_unittest.TestRequiredMessageMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestRequiredMessageMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestRequiredMessageMap}
 */
proto.protobuf_unittest.TestRequiredMessageMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMapFieldMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.TestRequired.deserializeBinaryFromReader, 0, new proto.protobuf_unittest.TestRequired());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestRequiredMessageMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestRequiredMessageMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestRequiredMessageMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestRequiredMessageMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMapFieldMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.TestRequired.serializeBinaryToWriter);
  }
};


/**
 * map<int32, TestRequired> map_field = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.TestRequired>}
 */
proto.protobuf_unittest.TestRequiredMessageMap.prototype.getMapFieldMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.TestRequired>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.protobuf_unittest.TestRequired));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestRequiredMessageMap} returns this
 */
proto.protobuf_unittest.TestRequiredMessageMap.prototype.clearMapFieldMap = function() {
  this.getMapFieldMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestArenaMap.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestArenaMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestArenaMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestArenaMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    mapInt32Int32Map: (f = msg.getMapInt32Int32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapInt64Int64Map: (f = msg.getMapInt64Int64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapUint32Uint32Map: (f = msg.getMapUint32Uint32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapUint64Uint64Map: (f = msg.getMapUint64Uint64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapSint32Sint32Map: (f = msg.getMapSint32Sint32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapSint64Sint64Map: (f = msg.getMapSint64Sint64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapFixed32Fixed32Map: (f = msg.getMapFixed32Fixed32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapFixed64Fixed64Map: (f = msg.getMapFixed64Fixed64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapSfixed32Sfixed32Map: (f = msg.getMapSfixed32Sfixed32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapSfixed64Sfixed64Map: (f = msg.getMapSfixed64Sfixed64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32FloatMap: (f = msg.getMapInt32FloatMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32DoubleMap: (f = msg.getMapInt32DoubleMap()) ? f.toObject(includeInstance, undefined) : [],
    mapBoolBoolMap: (f = msg.getMapBoolBoolMap()) ? f.toObject(includeInstance, undefined) : [],
    mapStringStringMap: (f = msg.getMapStringStringMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32BytesMap: (f = msg.getMapInt32BytesMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32EnumMap: (f = msg.getMapInt32EnumMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt32ForeignMessageMap: (f = msg.getMapInt32ForeignMessageMap()) ? f.toObject(includeInstance, proto.protobuf_unittest.ForeignMessage.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestArenaMap}
 */
proto.protobuf_unittest.TestArenaMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestArenaMap;
  return proto.protobuf_unittest.TestArenaMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestArenaMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestArenaMap}
 */
proto.protobuf_unittest.TestArenaMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMapInt32Int32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt32, null, 0, 0);
         });
      break;
    case 2:
      var value = msg.getMapInt64Int64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt64, jspb.BinaryReader.prototype.readInt64, null, 0, 0);
         });
      break;
    case 3:
      var value = msg.getMapUint32Uint32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32, null, 0, 0);
         });
      break;
    case 4:
      var value = msg.getMapUint64Uint64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readUint64, null, 0, 0);
         });
      break;
    case 5:
      var value = msg.getMapSint32Sint32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSint32, jspb.BinaryReader.prototype.readSint32, null, 0, 0);
         });
      break;
    case 6:
      var value = msg.getMapSint64Sint64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSint64, jspb.BinaryReader.prototype.readSint64, null, 0, 0);
         });
      break;
    case 7:
      var value = msg.getMapFixed32Fixed32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readFixed32, jspb.BinaryReader.prototype.readFixed32, null, 0, 0);
         });
      break;
    case 8:
      var value = msg.getMapFixed64Fixed64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readFixed64, jspb.BinaryReader.prototype.readFixed64, null, 0, 0);
         });
      break;
    case 9:
      var value = msg.getMapSfixed32Sfixed32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSfixed32, jspb.BinaryReader.prototype.readSfixed32, null, 0, 0);
         });
      break;
    case 10:
      var value = msg.getMapSfixed64Sfixed64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSfixed64, jspb.BinaryReader.prototype.readSfixed64, null, 0, 0);
         });
      break;
    case 11:
      var value = msg.getMapInt32FloatMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readFloat, null, 0, 0.0);
         });
      break;
    case 12:
      var value = msg.getMapInt32DoubleMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readDouble, null, 0, 0.0);
         });
      break;
    case 13:
      var value = msg.getMapBoolBoolMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readBool, jspb.BinaryReader.prototype.readBool, null, false, false);
         });
      break;
    case 14:
      var value = msg.getMapStringStringMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 15:
      var value = msg.getMapInt32BytesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readBytes, null, 0, "");
         });
      break;
    case 16:
      var value = msg.getMapInt32EnumMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readEnum, null, 0, 0);
         });
      break;
    case 17:
      var value = msg.getMapInt32ForeignMessageMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.ForeignMessage.deserializeBinaryFromReader, 0, new proto.protobuf_unittest.ForeignMessage());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestArenaMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestArenaMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestArenaMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestArenaMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMapInt32Int32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getMapInt64Int64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeInt64, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getMapUint32Uint32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getMapUint64Uint64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getMapSint32Sint32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeSint32, jspb.BinaryWriter.prototype.writeSint32);
  }
  f = message.getMapSint64Sint64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeSint64, jspb.BinaryWriter.prototype.writeSint64);
  }
  f = message.getMapFixed32Fixed32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeFixed32, jspb.BinaryWriter.prototype.writeFixed32);
  }
  f = message.getMapFixed64Fixed64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeFixed64, jspb.BinaryWriter.prototype.writeFixed64);
  }
  f = message.getMapSfixed32Sfixed32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeSfixed32, jspb.BinaryWriter.prototype.writeSfixed32);
  }
  f = message.getMapSfixed64Sfixed64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeSfixed64, jspb.BinaryWriter.prototype.writeSfixed64);
  }
  f = message.getMapInt32FloatMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeFloat);
  }
  f = message.getMapInt32DoubleMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeDouble);
  }
  f = message.getMapBoolBoolMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(13, writer, jspb.BinaryWriter.prototype.writeBool, jspb.BinaryWriter.prototype.writeBool);
  }
  f = message.getMapStringStringMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(14, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMapInt32BytesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getMapInt32EnumMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(16, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeEnum);
  }
  f = message.getMapInt32ForeignMessageMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(17, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.ForeignMessage.serializeBinaryToWriter);
  }
};


/**
 * map<int32, int32> map_int32_int32 = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMap.prototype.getMapInt32Int32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMap} returns this
 */
proto.protobuf_unittest.TestArenaMap.prototype.clearMapInt32Int32Map = function() {
  this.getMapInt32Int32Map().clear();
  return this;};


/**
 * map<int64, int64> map_int64_int64 = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMap.prototype.getMapInt64Int64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMap} returns this
 */
proto.protobuf_unittest.TestArenaMap.prototype.clearMapInt64Int64Map = function() {
  this.getMapInt64Int64Map().clear();
  return this;};


/**
 * map<uint32, uint32> map_uint32_uint32 = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMap.prototype.getMapUint32Uint32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMap} returns this
 */
proto.protobuf_unittest.TestArenaMap.prototype.clearMapUint32Uint32Map = function() {
  this.getMapUint32Uint32Map().clear();
  return this;};


/**
 * map<uint64, uint64> map_uint64_uint64 = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMap.prototype.getMapUint64Uint64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMap} returns this
 */
proto.protobuf_unittest.TestArenaMap.prototype.clearMapUint64Uint64Map = function() {
  this.getMapUint64Uint64Map().clear();
  return this;};


/**
 * map<sint32, sint32> map_sint32_sint32 = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMap.prototype.getMapSint32Sint32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMap} returns this
 */
proto.protobuf_unittest.TestArenaMap.prototype.clearMapSint32Sint32Map = function() {
  this.getMapSint32Sint32Map().clear();
  return this;};


/**
 * map<sint64, sint64> map_sint64_sint64 = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMap.prototype.getMapSint64Sint64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMap} returns this
 */
proto.protobuf_unittest.TestArenaMap.prototype.clearMapSint64Sint64Map = function() {
  this.getMapSint64Sint64Map().clear();
  return this;};


/**
 * map<fixed32, fixed32> map_fixed32_fixed32 = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMap.prototype.getMapFixed32Fixed32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMap} returns this
 */
proto.protobuf_unittest.TestArenaMap.prototype.clearMapFixed32Fixed32Map = function() {
  this.getMapFixed32Fixed32Map().clear();
  return this;};


/**
 * map<fixed64, fixed64> map_fixed64_fixed64 = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMap.prototype.getMapFixed64Fixed64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMap} returns this
 */
proto.protobuf_unittest.TestArenaMap.prototype.clearMapFixed64Fixed64Map = function() {
  this.getMapFixed64Fixed64Map().clear();
  return this;};


/**
 * map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMap.prototype.getMapSfixed32Sfixed32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMap} returns this
 */
proto.protobuf_unittest.TestArenaMap.prototype.clearMapSfixed32Sfixed32Map = function() {
  this.getMapSfixed32Sfixed32Map().clear();
  return this;};


/**
 * map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMap.prototype.getMapSfixed64Sfixed64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMap} returns this
 */
proto.protobuf_unittest.TestArenaMap.prototype.clearMapSfixed64Sfixed64Map = function() {
  this.getMapSfixed64Sfixed64Map().clear();
  return this;};


/**
 * map<int32, float> map_int32_float = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMap.prototype.getMapInt32FloatMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMap} returns this
 */
proto.protobuf_unittest.TestArenaMap.prototype.clearMapInt32FloatMap = function() {
  this.getMapInt32FloatMap().clear();
  return this;};


/**
 * map<int32, double> map_int32_double = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.TestArenaMap.prototype.getMapInt32DoubleMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMap} returns this
 */
proto.protobuf_unittest.TestArenaMap.prototype.clearMapInt32DoubleMap = function() {
  this.getMapInt32DoubleMap().clear();
  return this;};


/**
 * map<bool, bool> map_bool_bool = 13;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<boolean,boolean>}
 */
proto.protobuf_unittest.TestArenaMap.prototype.getMapBoolBoolMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<boolean,boolean>} */ (
      jspb.Message.getMapField(this, 13, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMap} returns this
 */
proto.protobuf_unittest.TestArenaMap.prototype.clearMapBoolBoolMap = function() {
  this.getMapBoolBoolMap().clear();
  return this;};


/**
 * map<string, string> map_string_string = 14;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.protobuf_unittest.TestArenaMap.prototype.getMapStringStringMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 14, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMap} returns this
 */
proto.protobuf_unittest.TestArenaMap.prototype.clearMapStringStringMap = function() {
  this.getMapStringStringMap().clear();
  return this;};


/**
 * map<int32, bytes> map_int32_bytes = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!(string|Uint8Array)>}
 */
proto.protobuf_unittest.TestArenaMap.prototype.getMapInt32BytesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMap} returns this
 */
proto.protobuf_unittest.TestArenaMap.prototype.clearMapInt32BytesMap = function() {
  this.getMapInt32BytesMap().clear();
  return this;};


/**
 * map<int32, MapEnum> map_int32_enum = 16;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.MapEnum>}
 */
proto.protobuf_unittest.TestArenaMap.prototype.getMapInt32EnumMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.MapEnum>} */ (
      jspb.Message.getMapField(this, 16, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMap} returns this
 */
proto.protobuf_unittest.TestArenaMap.prototype.clearMapInt32EnumMap = function() {
  this.getMapInt32EnumMap().clear();
  return this;};


/**
 * map<int32, ForeignMessage> map_int32_foreign_message = 17;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.protobuf_unittest.ForeignMessage>}
 */
proto.protobuf_unittest.TestArenaMap.prototype.getMapInt32ForeignMessageMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.protobuf_unittest.ForeignMessage>} */ (
      jspb.Message.getMapField(this, 17, opt_noLazyCreate,
      proto.protobuf_unittest.ForeignMessage));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestArenaMap} returns this
 */
proto.protobuf_unittest.TestArenaMap.prototype.clearMapInt32ForeignMessageMap = function() {
  this.getMapInt32ForeignMessageMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.MessageContainingEnumCalledType.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.MessageContainingEnumCalledType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.MessageContainingEnumCalledType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.MessageContainingEnumCalledType.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeMap: (f = msg.getTypeMap()) ? f.toObject(includeInstance, proto.protobuf_unittest.MessageContainingEnumCalledType.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.MessageContainingEnumCalledType}
 */
proto.protobuf_unittest.MessageContainingEnumCalledType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.MessageContainingEnumCalledType;
  return proto.protobuf_unittest.MessageContainingEnumCalledType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.MessageContainingEnumCalledType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.MessageContainingEnumCalledType}
 */
proto.protobuf_unittest.MessageContainingEnumCalledType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getTypeMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.MessageContainingEnumCalledType.deserializeBinaryFromReader, "", new proto.protobuf_unittest.MessageContainingEnumCalledType());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.MessageContainingEnumCalledType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.MessageContainingEnumCalledType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.MessageContainingEnumCalledType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.MessageContainingEnumCalledType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.MessageContainingEnumCalledType.serializeBinaryToWriter);
  }
};


/**
 * @enum {number}
 */
proto.protobuf_unittest.MessageContainingEnumCalledType.Type = {
  TYPE_FOO: 0
};

/**
 * map<string, MessageContainingEnumCalledType> type = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.protobuf_unittest.MessageContainingEnumCalledType>}
 */
proto.protobuf_unittest.MessageContainingEnumCalledType.prototype.getTypeMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.protobuf_unittest.MessageContainingEnumCalledType>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.protobuf_unittest.MessageContainingEnumCalledType));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.MessageContainingEnumCalledType} returns this
 */
proto.protobuf_unittest.MessageContainingEnumCalledType.prototype.clearTypeMap = function() {
  this.getTypeMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.MessageContainingMapCalledEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.MessageContainingMapCalledEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.MessageContainingMapCalledEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.MessageContainingMapCalledEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    entryMap: (f = msg.getEntryMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.MessageContainingMapCalledEntry}
 */
proto.protobuf_unittest.MessageContainingMapCalledEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.MessageContainingMapCalledEntry;
  return proto.protobuf_unittest.MessageContainingMapCalledEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.MessageContainingMapCalledEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.MessageContainingMapCalledEntry}
 */
proto.protobuf_unittest.MessageContainingMapCalledEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getEntryMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt32, null, 0, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.MessageContainingMapCalledEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.MessageContainingMapCalledEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.MessageContainingMapCalledEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.MessageContainingMapCalledEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntryMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt32);
  }
};


/**
 * map<int32, int32> entry = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.protobuf_unittest.MessageContainingMapCalledEntry.prototype.getEntryMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.MessageContainingMapCalledEntry} returns this
 */
proto.protobuf_unittest.MessageContainingMapCalledEntry.prototype.clearEntryMap = function() {
  this.getEntryMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf_unittest.TestRecursiveMapMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf_unittest.TestRecursiveMapMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf_unittest.TestRecursiveMapMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestRecursiveMapMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    aMap: (f = msg.getAMap()) ? f.toObject(includeInstance, proto.protobuf_unittest.TestRecursiveMapMessage.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf_unittest.TestRecursiveMapMessage}
 */
proto.protobuf_unittest.TestRecursiveMapMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf_unittest.TestRecursiveMapMessage;
  return proto.protobuf_unittest.TestRecursiveMapMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf_unittest.TestRecursiveMapMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf_unittest.TestRecursiveMapMessage}
 */
proto.protobuf_unittest.TestRecursiveMapMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getAMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.protobuf_unittest.TestRecursiveMapMessage.deserializeBinaryFromReader, "", new proto.protobuf_unittest.TestRecursiveMapMessage());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf_unittest.TestRecursiveMapMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf_unittest.TestRecursiveMapMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf_unittest.TestRecursiveMapMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf_unittest.TestRecursiveMapMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.protobuf_unittest.TestRecursiveMapMessage.serializeBinaryToWriter);
  }
};


/**
 * map<string, TestRecursiveMapMessage> a = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.protobuf_unittest.TestRecursiveMapMessage>}
 */
proto.protobuf_unittest.TestRecursiveMapMessage.prototype.getAMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.protobuf_unittest.TestRecursiveMapMessage>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.protobuf_unittest.TestRecursiveMapMessage));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protobuf_unittest.TestRecursiveMapMessage} returns this
 */
proto.protobuf_unittest.TestRecursiveMapMessage.prototype.clearAMap = function() {
  this.getAMap().clear();
  return this;};


/**
 * @enum {number}
 */
proto.protobuf_unittest.MapEnum = {
  MAP_ENUM_FOO: 0,
  MAP_ENUM_BAR: 1,
  MAP_ENUM_BAZ: 2
};

goog.object.extend(exports, proto.protobuf_unittest);
