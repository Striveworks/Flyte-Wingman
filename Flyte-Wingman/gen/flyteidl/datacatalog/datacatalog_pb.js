// source: flyteidl/datacatalog/datacatalog.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var flyteidl_core_literals_pb = require('../../flyteidl/core/literals_pb.js');
goog.object.extend(proto, flyteidl_core_literals_pb);
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.datacatalog.AddTagRequest', null, global);
goog.exportSymbol('proto.datacatalog.AddTagResponse', null, global);
goog.exportSymbol('proto.datacatalog.Artifact', null, global);
goog.exportSymbol('proto.datacatalog.ArtifactData', null, global);
goog.exportSymbol('proto.datacatalog.ArtifactPropertyFilter', null, global);
goog.exportSymbol('proto.datacatalog.ArtifactPropertyFilter.PropertyCase', null, global);
goog.exportSymbol('proto.datacatalog.CreateArtifactRequest', null, global);
goog.exportSymbol('proto.datacatalog.CreateArtifactResponse', null, global);
goog.exportSymbol('proto.datacatalog.CreateDatasetRequest', null, global);
goog.exportSymbol('proto.datacatalog.CreateDatasetResponse', null, global);
goog.exportSymbol('proto.datacatalog.Dataset', null, global);
goog.exportSymbol('proto.datacatalog.DatasetID', null, global);
goog.exportSymbol('proto.datacatalog.DatasetPropertyFilter', null, global);
goog.exportSymbol('proto.datacatalog.DatasetPropertyFilter.PropertyCase', null, global);
goog.exportSymbol('proto.datacatalog.FilterExpression', null, global);
goog.exportSymbol('proto.datacatalog.GetArtifactRequest', null, global);
goog.exportSymbol('proto.datacatalog.GetArtifactRequest.QueryHandleCase', null, global);
goog.exportSymbol('proto.datacatalog.GetArtifactResponse', null, global);
goog.exportSymbol('proto.datacatalog.GetDatasetRequest', null, global);
goog.exportSymbol('proto.datacatalog.GetDatasetResponse', null, global);
goog.exportSymbol('proto.datacatalog.GetOrExtendReservationRequest', null, global);
goog.exportSymbol('proto.datacatalog.GetOrExtendReservationResponse', null, global);
goog.exportSymbol('proto.datacatalog.KeyValuePair', null, global);
goog.exportSymbol('proto.datacatalog.ListArtifactsRequest', null, global);
goog.exportSymbol('proto.datacatalog.ListArtifactsResponse', null, global);
goog.exportSymbol('proto.datacatalog.ListDatasetsRequest', null, global);
goog.exportSymbol('proto.datacatalog.ListDatasetsResponse', null, global);
goog.exportSymbol('proto.datacatalog.Metadata', null, global);
goog.exportSymbol('proto.datacatalog.PaginationOptions', null, global);
goog.exportSymbol('proto.datacatalog.PaginationOptions.SortKey', null, global);
goog.exportSymbol('proto.datacatalog.PaginationOptions.SortOrder', null, global);
goog.exportSymbol('proto.datacatalog.Partition', null, global);
goog.exportSymbol('proto.datacatalog.PartitionPropertyFilter', null, global);
goog.exportSymbol('proto.datacatalog.PartitionPropertyFilter.PropertyCase', null, global);
goog.exportSymbol('proto.datacatalog.ReleaseReservationRequest', null, global);
goog.exportSymbol('proto.datacatalog.ReleaseReservationResponse', null, global);
goog.exportSymbol('proto.datacatalog.Reservation', null, global);
goog.exportSymbol('proto.datacatalog.ReservationID', null, global);
goog.exportSymbol('proto.datacatalog.SinglePropertyFilter', null, global);
goog.exportSymbol('proto.datacatalog.SinglePropertyFilter.ComparisonOperator', null, global);
goog.exportSymbol('proto.datacatalog.SinglePropertyFilter.PropertyFilterCase', null, global);
goog.exportSymbol('proto.datacatalog.Tag', null, global);
goog.exportSymbol('proto.datacatalog.TagPropertyFilter', null, global);
goog.exportSymbol('proto.datacatalog.TagPropertyFilter.PropertyCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.CreateDatasetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.CreateDatasetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.CreateDatasetRequest.displayName = 'proto.datacatalog.CreateDatasetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.CreateDatasetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.CreateDatasetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.CreateDatasetResponse.displayName = 'proto.datacatalog.CreateDatasetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.GetDatasetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.GetDatasetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.GetDatasetRequest.displayName = 'proto.datacatalog.GetDatasetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.GetDatasetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.GetDatasetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.GetDatasetResponse.displayName = 'proto.datacatalog.GetDatasetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.GetArtifactRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.datacatalog.GetArtifactRequest.oneofGroups_);
};
goog.inherits(proto.datacatalog.GetArtifactRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.GetArtifactRequest.displayName = 'proto.datacatalog.GetArtifactRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.GetArtifactResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.GetArtifactResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.GetArtifactResponse.displayName = 'proto.datacatalog.GetArtifactResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.CreateArtifactRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.CreateArtifactRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.CreateArtifactRequest.displayName = 'proto.datacatalog.CreateArtifactRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.CreateArtifactResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.CreateArtifactResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.CreateArtifactResponse.displayName = 'proto.datacatalog.CreateArtifactResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.AddTagRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.AddTagRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.AddTagRequest.displayName = 'proto.datacatalog.AddTagRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.AddTagResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.AddTagResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.AddTagResponse.displayName = 'proto.datacatalog.AddTagResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.ListArtifactsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.ListArtifactsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.ListArtifactsRequest.displayName = 'proto.datacatalog.ListArtifactsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.ListArtifactsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.datacatalog.ListArtifactsResponse.repeatedFields_, null);
};
goog.inherits(proto.datacatalog.ListArtifactsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.ListArtifactsResponse.displayName = 'proto.datacatalog.ListArtifactsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.ListDatasetsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.ListDatasetsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.ListDatasetsRequest.displayName = 'proto.datacatalog.ListDatasetsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.ListDatasetsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.datacatalog.ListDatasetsResponse.repeatedFields_, null);
};
goog.inherits(proto.datacatalog.ListDatasetsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.ListDatasetsResponse.displayName = 'proto.datacatalog.ListDatasetsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.ReservationID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.ReservationID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.ReservationID.displayName = 'proto.datacatalog.ReservationID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.GetOrExtendReservationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.GetOrExtendReservationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.GetOrExtendReservationRequest.displayName = 'proto.datacatalog.GetOrExtendReservationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.Reservation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.Reservation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.Reservation.displayName = 'proto.datacatalog.Reservation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.GetOrExtendReservationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.GetOrExtendReservationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.GetOrExtendReservationResponse.displayName = 'proto.datacatalog.GetOrExtendReservationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.ReleaseReservationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.ReleaseReservationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.ReleaseReservationRequest.displayName = 'proto.datacatalog.ReleaseReservationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.ReleaseReservationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.ReleaseReservationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.ReleaseReservationResponse.displayName = 'proto.datacatalog.ReleaseReservationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.Dataset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.datacatalog.Dataset.repeatedFields_, null);
};
goog.inherits(proto.datacatalog.Dataset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.Dataset.displayName = 'proto.datacatalog.Dataset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.Partition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.Partition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.Partition.displayName = 'proto.datacatalog.Partition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.DatasetID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.DatasetID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.DatasetID.displayName = 'proto.datacatalog.DatasetID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.Artifact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.datacatalog.Artifact.repeatedFields_, null);
};
goog.inherits(proto.datacatalog.Artifact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.Artifact.displayName = 'proto.datacatalog.Artifact';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.ArtifactData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.ArtifactData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.ArtifactData.displayName = 'proto.datacatalog.ArtifactData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.Tag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.Tag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.Tag.displayName = 'proto.datacatalog.Tag';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.Metadata.displayName = 'proto.datacatalog.Metadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.FilterExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.datacatalog.FilterExpression.repeatedFields_, null);
};
goog.inherits(proto.datacatalog.FilterExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.FilterExpression.displayName = 'proto.datacatalog.FilterExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.SinglePropertyFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.datacatalog.SinglePropertyFilter.oneofGroups_);
};
goog.inherits(proto.datacatalog.SinglePropertyFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.SinglePropertyFilter.displayName = 'proto.datacatalog.SinglePropertyFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.ArtifactPropertyFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.datacatalog.ArtifactPropertyFilter.oneofGroups_);
};
goog.inherits(proto.datacatalog.ArtifactPropertyFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.ArtifactPropertyFilter.displayName = 'proto.datacatalog.ArtifactPropertyFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.TagPropertyFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.datacatalog.TagPropertyFilter.oneofGroups_);
};
goog.inherits(proto.datacatalog.TagPropertyFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.TagPropertyFilter.displayName = 'proto.datacatalog.TagPropertyFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.PartitionPropertyFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.datacatalog.PartitionPropertyFilter.oneofGroups_);
};
goog.inherits(proto.datacatalog.PartitionPropertyFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.PartitionPropertyFilter.displayName = 'proto.datacatalog.PartitionPropertyFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.KeyValuePair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.KeyValuePair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.KeyValuePair.displayName = 'proto.datacatalog.KeyValuePair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.DatasetPropertyFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.datacatalog.DatasetPropertyFilter.oneofGroups_);
};
goog.inherits(proto.datacatalog.DatasetPropertyFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.DatasetPropertyFilter.displayName = 'proto.datacatalog.DatasetPropertyFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datacatalog.PaginationOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datacatalog.PaginationOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datacatalog.PaginationOptions.displayName = 'proto.datacatalog.PaginationOptions';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.CreateDatasetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.CreateDatasetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.CreateDatasetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.CreateDatasetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataset: (f = msg.getDataset()) && proto.datacatalog.Dataset.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.CreateDatasetRequest}
 */
proto.datacatalog.CreateDatasetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.CreateDatasetRequest;
  return proto.datacatalog.CreateDatasetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.CreateDatasetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.CreateDatasetRequest}
 */
proto.datacatalog.CreateDatasetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datacatalog.Dataset;
      reader.readMessage(value,proto.datacatalog.Dataset.deserializeBinaryFromReader);
      msg.setDataset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.CreateDatasetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.CreateDatasetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.CreateDatasetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.CreateDatasetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataset();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datacatalog.Dataset.serializeBinaryToWriter
    );
  }
};


/**
 * optional Dataset dataset = 1;
 * @return {?proto.datacatalog.Dataset}
 */
proto.datacatalog.CreateDatasetRequest.prototype.getDataset = function() {
  return /** @type{?proto.datacatalog.Dataset} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.Dataset, 1));
};


/**
 * @param {?proto.datacatalog.Dataset|undefined} value
 * @return {!proto.datacatalog.CreateDatasetRequest} returns this
*/
proto.datacatalog.CreateDatasetRequest.prototype.setDataset = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.CreateDatasetRequest} returns this
 */
proto.datacatalog.CreateDatasetRequest.prototype.clearDataset = function() {
  return this.setDataset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.CreateDatasetRequest.prototype.hasDataset = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.CreateDatasetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.CreateDatasetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.CreateDatasetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.CreateDatasetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.CreateDatasetResponse}
 */
proto.datacatalog.CreateDatasetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.CreateDatasetResponse;
  return proto.datacatalog.CreateDatasetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.CreateDatasetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.CreateDatasetResponse}
 */
proto.datacatalog.CreateDatasetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.CreateDatasetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.CreateDatasetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.CreateDatasetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.CreateDatasetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.GetDatasetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.GetDatasetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.GetDatasetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.GetDatasetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataset: (f = msg.getDataset()) && proto.datacatalog.DatasetID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.GetDatasetRequest}
 */
proto.datacatalog.GetDatasetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.GetDatasetRequest;
  return proto.datacatalog.GetDatasetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.GetDatasetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.GetDatasetRequest}
 */
proto.datacatalog.GetDatasetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datacatalog.DatasetID;
      reader.readMessage(value,proto.datacatalog.DatasetID.deserializeBinaryFromReader);
      msg.setDataset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.GetDatasetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.GetDatasetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.GetDatasetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.GetDatasetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataset();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datacatalog.DatasetID.serializeBinaryToWriter
    );
  }
};


/**
 * optional DatasetID dataset = 1;
 * @return {?proto.datacatalog.DatasetID}
 */
proto.datacatalog.GetDatasetRequest.prototype.getDataset = function() {
  return /** @type{?proto.datacatalog.DatasetID} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.DatasetID, 1));
};


/**
 * @param {?proto.datacatalog.DatasetID|undefined} value
 * @return {!proto.datacatalog.GetDatasetRequest} returns this
*/
proto.datacatalog.GetDatasetRequest.prototype.setDataset = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.GetDatasetRequest} returns this
 */
proto.datacatalog.GetDatasetRequest.prototype.clearDataset = function() {
  return this.setDataset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.GetDatasetRequest.prototype.hasDataset = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.GetDatasetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.GetDatasetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.GetDatasetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.GetDatasetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataset: (f = msg.getDataset()) && proto.datacatalog.Dataset.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.GetDatasetResponse}
 */
proto.datacatalog.GetDatasetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.GetDatasetResponse;
  return proto.datacatalog.GetDatasetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.GetDatasetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.GetDatasetResponse}
 */
proto.datacatalog.GetDatasetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datacatalog.Dataset;
      reader.readMessage(value,proto.datacatalog.Dataset.deserializeBinaryFromReader);
      msg.setDataset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.GetDatasetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.GetDatasetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.GetDatasetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.GetDatasetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataset();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datacatalog.Dataset.serializeBinaryToWriter
    );
  }
};


/**
 * optional Dataset dataset = 1;
 * @return {?proto.datacatalog.Dataset}
 */
proto.datacatalog.GetDatasetResponse.prototype.getDataset = function() {
  return /** @type{?proto.datacatalog.Dataset} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.Dataset, 1));
};


/**
 * @param {?proto.datacatalog.Dataset|undefined} value
 * @return {!proto.datacatalog.GetDatasetResponse} returns this
*/
proto.datacatalog.GetDatasetResponse.prototype.setDataset = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.GetDatasetResponse} returns this
 */
proto.datacatalog.GetDatasetResponse.prototype.clearDataset = function() {
  return this.setDataset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.GetDatasetResponse.prototype.hasDataset = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.datacatalog.GetArtifactRequest.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.datacatalog.GetArtifactRequest.QueryHandleCase = {
  QUERY_HANDLE_NOT_SET: 0,
  ARTIFACT_ID: 2,
  TAG_NAME: 3
};

/**
 * @return {proto.datacatalog.GetArtifactRequest.QueryHandleCase}
 */
proto.datacatalog.GetArtifactRequest.prototype.getQueryHandleCase = function() {
  return /** @type {proto.datacatalog.GetArtifactRequest.QueryHandleCase} */(jspb.Message.computeOneofCase(this, proto.datacatalog.GetArtifactRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.GetArtifactRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.GetArtifactRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.GetArtifactRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.GetArtifactRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataset: (f = msg.getDataset()) && proto.datacatalog.DatasetID.toObject(includeInstance, f),
    artifactId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tagName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.GetArtifactRequest}
 */
proto.datacatalog.GetArtifactRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.GetArtifactRequest;
  return proto.datacatalog.GetArtifactRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.GetArtifactRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.GetArtifactRequest}
 */
proto.datacatalog.GetArtifactRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datacatalog.DatasetID;
      reader.readMessage(value,proto.datacatalog.DatasetID.deserializeBinaryFromReader);
      msg.setDataset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setArtifactId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTagName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.GetArtifactRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.GetArtifactRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.GetArtifactRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.GetArtifactRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataset();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datacatalog.DatasetID.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional DatasetID dataset = 1;
 * @return {?proto.datacatalog.DatasetID}
 */
proto.datacatalog.GetArtifactRequest.prototype.getDataset = function() {
  return /** @type{?proto.datacatalog.DatasetID} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.DatasetID, 1));
};


/**
 * @param {?proto.datacatalog.DatasetID|undefined} value
 * @return {!proto.datacatalog.GetArtifactRequest} returns this
*/
proto.datacatalog.GetArtifactRequest.prototype.setDataset = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.GetArtifactRequest} returns this
 */
proto.datacatalog.GetArtifactRequest.prototype.clearDataset = function() {
  return this.setDataset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.GetArtifactRequest.prototype.hasDataset = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string artifact_id = 2;
 * @return {string}
 */
proto.datacatalog.GetArtifactRequest.prototype.getArtifactId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.GetArtifactRequest} returns this
 */
proto.datacatalog.GetArtifactRequest.prototype.setArtifactId = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.datacatalog.GetArtifactRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.datacatalog.GetArtifactRequest} returns this
 */
proto.datacatalog.GetArtifactRequest.prototype.clearArtifactId = function() {
  return jspb.Message.setOneofField(this, 2, proto.datacatalog.GetArtifactRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.GetArtifactRequest.prototype.hasArtifactId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string tag_name = 3;
 * @return {string}
 */
proto.datacatalog.GetArtifactRequest.prototype.getTagName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.GetArtifactRequest} returns this
 */
proto.datacatalog.GetArtifactRequest.prototype.setTagName = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.datacatalog.GetArtifactRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.datacatalog.GetArtifactRequest} returns this
 */
proto.datacatalog.GetArtifactRequest.prototype.clearTagName = function() {
  return jspb.Message.setOneofField(this, 3, proto.datacatalog.GetArtifactRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.GetArtifactRequest.prototype.hasTagName = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.GetArtifactResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.GetArtifactResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.GetArtifactResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.GetArtifactResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    artifact: (f = msg.getArtifact()) && proto.datacatalog.Artifact.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.GetArtifactResponse}
 */
proto.datacatalog.GetArtifactResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.GetArtifactResponse;
  return proto.datacatalog.GetArtifactResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.GetArtifactResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.GetArtifactResponse}
 */
proto.datacatalog.GetArtifactResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datacatalog.Artifact;
      reader.readMessage(value,proto.datacatalog.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.GetArtifactResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.GetArtifactResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.GetArtifactResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.GetArtifactResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datacatalog.Artifact.serializeBinaryToWriter
    );
  }
};


/**
 * optional Artifact artifact = 1;
 * @return {?proto.datacatalog.Artifact}
 */
proto.datacatalog.GetArtifactResponse.prototype.getArtifact = function() {
  return /** @type{?proto.datacatalog.Artifact} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.Artifact, 1));
};


/**
 * @param {?proto.datacatalog.Artifact|undefined} value
 * @return {!proto.datacatalog.GetArtifactResponse} returns this
*/
proto.datacatalog.GetArtifactResponse.prototype.setArtifact = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.GetArtifactResponse} returns this
 */
proto.datacatalog.GetArtifactResponse.prototype.clearArtifact = function() {
  return this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.GetArtifactResponse.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.CreateArtifactRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.CreateArtifactRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.CreateArtifactRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.CreateArtifactRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    artifact: (f = msg.getArtifact()) && proto.datacatalog.Artifact.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.CreateArtifactRequest}
 */
proto.datacatalog.CreateArtifactRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.CreateArtifactRequest;
  return proto.datacatalog.CreateArtifactRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.CreateArtifactRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.CreateArtifactRequest}
 */
proto.datacatalog.CreateArtifactRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datacatalog.Artifact;
      reader.readMessage(value,proto.datacatalog.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.CreateArtifactRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.CreateArtifactRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.CreateArtifactRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.CreateArtifactRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datacatalog.Artifact.serializeBinaryToWriter
    );
  }
};


/**
 * optional Artifact artifact = 1;
 * @return {?proto.datacatalog.Artifact}
 */
proto.datacatalog.CreateArtifactRequest.prototype.getArtifact = function() {
  return /** @type{?proto.datacatalog.Artifact} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.Artifact, 1));
};


/**
 * @param {?proto.datacatalog.Artifact|undefined} value
 * @return {!proto.datacatalog.CreateArtifactRequest} returns this
*/
proto.datacatalog.CreateArtifactRequest.prototype.setArtifact = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.CreateArtifactRequest} returns this
 */
proto.datacatalog.CreateArtifactRequest.prototype.clearArtifact = function() {
  return this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.CreateArtifactRequest.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.CreateArtifactResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.CreateArtifactResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.CreateArtifactResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.CreateArtifactResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.CreateArtifactResponse}
 */
proto.datacatalog.CreateArtifactResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.CreateArtifactResponse;
  return proto.datacatalog.CreateArtifactResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.CreateArtifactResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.CreateArtifactResponse}
 */
proto.datacatalog.CreateArtifactResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.CreateArtifactResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.CreateArtifactResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.CreateArtifactResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.CreateArtifactResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.AddTagRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.AddTagRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.AddTagRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.AddTagRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tag: (f = msg.getTag()) && proto.datacatalog.Tag.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.AddTagRequest}
 */
proto.datacatalog.AddTagRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.AddTagRequest;
  return proto.datacatalog.AddTagRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.AddTagRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.AddTagRequest}
 */
proto.datacatalog.AddTagRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datacatalog.Tag;
      reader.readMessage(value,proto.datacatalog.Tag.deserializeBinaryFromReader);
      msg.setTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.AddTagRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.AddTagRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.AddTagRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.AddTagRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTag();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datacatalog.Tag.serializeBinaryToWriter
    );
  }
};


/**
 * optional Tag tag = 1;
 * @return {?proto.datacatalog.Tag}
 */
proto.datacatalog.AddTagRequest.prototype.getTag = function() {
  return /** @type{?proto.datacatalog.Tag} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.Tag, 1));
};


/**
 * @param {?proto.datacatalog.Tag|undefined} value
 * @return {!proto.datacatalog.AddTagRequest} returns this
*/
proto.datacatalog.AddTagRequest.prototype.setTag = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.AddTagRequest} returns this
 */
proto.datacatalog.AddTagRequest.prototype.clearTag = function() {
  return this.setTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.AddTagRequest.prototype.hasTag = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.AddTagResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.AddTagResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.AddTagResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.AddTagResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.AddTagResponse}
 */
proto.datacatalog.AddTagResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.AddTagResponse;
  return proto.datacatalog.AddTagResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.AddTagResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.AddTagResponse}
 */
proto.datacatalog.AddTagResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.AddTagResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.AddTagResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.AddTagResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.AddTagResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.ListArtifactsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.ListArtifactsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.ListArtifactsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.ListArtifactsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataset: (f = msg.getDataset()) && proto.datacatalog.DatasetID.toObject(includeInstance, f),
    filter: (f = msg.getFilter()) && proto.datacatalog.FilterExpression.toObject(includeInstance, f),
    pagination: (f = msg.getPagination()) && proto.datacatalog.PaginationOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.ListArtifactsRequest}
 */
proto.datacatalog.ListArtifactsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.ListArtifactsRequest;
  return proto.datacatalog.ListArtifactsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.ListArtifactsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.ListArtifactsRequest}
 */
proto.datacatalog.ListArtifactsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datacatalog.DatasetID;
      reader.readMessage(value,proto.datacatalog.DatasetID.deserializeBinaryFromReader);
      msg.setDataset(value);
      break;
    case 2:
      var value = new proto.datacatalog.FilterExpression;
      reader.readMessage(value,proto.datacatalog.FilterExpression.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 3:
      var value = new proto.datacatalog.PaginationOptions;
      reader.readMessage(value,proto.datacatalog.PaginationOptions.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.ListArtifactsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.ListArtifactsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.ListArtifactsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.ListArtifactsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataset();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datacatalog.DatasetID.serializeBinaryToWriter
    );
  }
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.datacatalog.FilterExpression.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.datacatalog.PaginationOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional DatasetID dataset = 1;
 * @return {?proto.datacatalog.DatasetID}
 */
proto.datacatalog.ListArtifactsRequest.prototype.getDataset = function() {
  return /** @type{?proto.datacatalog.DatasetID} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.DatasetID, 1));
};


/**
 * @param {?proto.datacatalog.DatasetID|undefined} value
 * @return {!proto.datacatalog.ListArtifactsRequest} returns this
*/
proto.datacatalog.ListArtifactsRequest.prototype.setDataset = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.ListArtifactsRequest} returns this
 */
proto.datacatalog.ListArtifactsRequest.prototype.clearDataset = function() {
  return this.setDataset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.ListArtifactsRequest.prototype.hasDataset = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FilterExpression filter = 2;
 * @return {?proto.datacatalog.FilterExpression}
 */
proto.datacatalog.ListArtifactsRequest.prototype.getFilter = function() {
  return /** @type{?proto.datacatalog.FilterExpression} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.FilterExpression, 2));
};


/**
 * @param {?proto.datacatalog.FilterExpression|undefined} value
 * @return {!proto.datacatalog.ListArtifactsRequest} returns this
*/
proto.datacatalog.ListArtifactsRequest.prototype.setFilter = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.ListArtifactsRequest} returns this
 */
proto.datacatalog.ListArtifactsRequest.prototype.clearFilter = function() {
  return this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.ListArtifactsRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PaginationOptions pagination = 3;
 * @return {?proto.datacatalog.PaginationOptions}
 */
proto.datacatalog.ListArtifactsRequest.prototype.getPagination = function() {
  return /** @type{?proto.datacatalog.PaginationOptions} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.PaginationOptions, 3));
};


/**
 * @param {?proto.datacatalog.PaginationOptions|undefined} value
 * @return {!proto.datacatalog.ListArtifactsRequest} returns this
*/
proto.datacatalog.ListArtifactsRequest.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.ListArtifactsRequest} returns this
 */
proto.datacatalog.ListArtifactsRequest.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.ListArtifactsRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.datacatalog.ListArtifactsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.ListArtifactsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.ListArtifactsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.ListArtifactsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.ListArtifactsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    artifactsList: jspb.Message.toObjectList(msg.getArtifactsList(),
    proto.datacatalog.Artifact.toObject, includeInstance),
    nextToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.ListArtifactsResponse}
 */
proto.datacatalog.ListArtifactsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.ListArtifactsResponse;
  return proto.datacatalog.ListArtifactsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.ListArtifactsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.ListArtifactsResponse}
 */
proto.datacatalog.ListArtifactsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datacatalog.Artifact;
      reader.readMessage(value,proto.datacatalog.Artifact.deserializeBinaryFromReader);
      msg.addArtifacts(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.ListArtifactsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.ListArtifactsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.ListArtifactsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.ListArtifactsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifactsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.datacatalog.Artifact.serializeBinaryToWriter
    );
  }
  f = message.getNextToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated Artifact artifacts = 1;
 * @return {!Array<!proto.datacatalog.Artifact>}
 */
proto.datacatalog.ListArtifactsResponse.prototype.getArtifactsList = function() {
  return /** @type{!Array<!proto.datacatalog.Artifact>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.datacatalog.Artifact, 1));
};


/**
 * @param {!Array<!proto.datacatalog.Artifact>} value
 * @return {!proto.datacatalog.ListArtifactsResponse} returns this
*/
proto.datacatalog.ListArtifactsResponse.prototype.setArtifactsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.datacatalog.Artifact=} opt_value
 * @param {number=} opt_index
 * @return {!proto.datacatalog.Artifact}
 */
proto.datacatalog.ListArtifactsResponse.prototype.addArtifacts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.datacatalog.Artifact, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.datacatalog.ListArtifactsResponse} returns this
 */
proto.datacatalog.ListArtifactsResponse.prototype.clearArtifactsList = function() {
  return this.setArtifactsList([]);
};


/**
 * optional string next_token = 2;
 * @return {string}
 */
proto.datacatalog.ListArtifactsResponse.prototype.getNextToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.ListArtifactsResponse} returns this
 */
proto.datacatalog.ListArtifactsResponse.prototype.setNextToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.ListDatasetsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.ListDatasetsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.ListDatasetsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.ListDatasetsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: (f = msg.getFilter()) && proto.datacatalog.FilterExpression.toObject(includeInstance, f),
    pagination: (f = msg.getPagination()) && proto.datacatalog.PaginationOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.ListDatasetsRequest}
 */
proto.datacatalog.ListDatasetsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.ListDatasetsRequest;
  return proto.datacatalog.ListDatasetsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.ListDatasetsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.ListDatasetsRequest}
 */
proto.datacatalog.ListDatasetsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datacatalog.FilterExpression;
      reader.readMessage(value,proto.datacatalog.FilterExpression.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 2:
      var value = new proto.datacatalog.PaginationOptions;
      reader.readMessage(value,proto.datacatalog.PaginationOptions.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.ListDatasetsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.ListDatasetsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.ListDatasetsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.ListDatasetsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datacatalog.FilterExpression.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.datacatalog.PaginationOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional FilterExpression filter = 1;
 * @return {?proto.datacatalog.FilterExpression}
 */
proto.datacatalog.ListDatasetsRequest.prototype.getFilter = function() {
  return /** @type{?proto.datacatalog.FilterExpression} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.FilterExpression, 1));
};


/**
 * @param {?proto.datacatalog.FilterExpression|undefined} value
 * @return {!proto.datacatalog.ListDatasetsRequest} returns this
*/
proto.datacatalog.ListDatasetsRequest.prototype.setFilter = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.ListDatasetsRequest} returns this
 */
proto.datacatalog.ListDatasetsRequest.prototype.clearFilter = function() {
  return this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.ListDatasetsRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PaginationOptions pagination = 2;
 * @return {?proto.datacatalog.PaginationOptions}
 */
proto.datacatalog.ListDatasetsRequest.prototype.getPagination = function() {
  return /** @type{?proto.datacatalog.PaginationOptions} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.PaginationOptions, 2));
};


/**
 * @param {?proto.datacatalog.PaginationOptions|undefined} value
 * @return {!proto.datacatalog.ListDatasetsRequest} returns this
*/
proto.datacatalog.ListDatasetsRequest.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.ListDatasetsRequest} returns this
 */
proto.datacatalog.ListDatasetsRequest.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.ListDatasetsRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.datacatalog.ListDatasetsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.ListDatasetsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.ListDatasetsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.ListDatasetsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.ListDatasetsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    datasetsList: jspb.Message.toObjectList(msg.getDatasetsList(),
    proto.datacatalog.Dataset.toObject, includeInstance),
    nextToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.ListDatasetsResponse}
 */
proto.datacatalog.ListDatasetsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.ListDatasetsResponse;
  return proto.datacatalog.ListDatasetsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.ListDatasetsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.ListDatasetsResponse}
 */
proto.datacatalog.ListDatasetsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datacatalog.Dataset;
      reader.readMessage(value,proto.datacatalog.Dataset.deserializeBinaryFromReader);
      msg.addDatasets(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.ListDatasetsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.ListDatasetsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.ListDatasetsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.ListDatasetsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatasetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.datacatalog.Dataset.serializeBinaryToWriter
    );
  }
  f = message.getNextToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated Dataset datasets = 1;
 * @return {!Array<!proto.datacatalog.Dataset>}
 */
proto.datacatalog.ListDatasetsResponse.prototype.getDatasetsList = function() {
  return /** @type{!Array<!proto.datacatalog.Dataset>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.datacatalog.Dataset, 1));
};


/**
 * @param {!Array<!proto.datacatalog.Dataset>} value
 * @return {!proto.datacatalog.ListDatasetsResponse} returns this
*/
proto.datacatalog.ListDatasetsResponse.prototype.setDatasetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.datacatalog.Dataset=} opt_value
 * @param {number=} opt_index
 * @return {!proto.datacatalog.Dataset}
 */
proto.datacatalog.ListDatasetsResponse.prototype.addDatasets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.datacatalog.Dataset, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.datacatalog.ListDatasetsResponse} returns this
 */
proto.datacatalog.ListDatasetsResponse.prototype.clearDatasetsList = function() {
  return this.setDatasetsList([]);
};


/**
 * optional string next_token = 2;
 * @return {string}
 */
proto.datacatalog.ListDatasetsResponse.prototype.getNextToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.ListDatasetsResponse} returns this
 */
proto.datacatalog.ListDatasetsResponse.prototype.setNextToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.ReservationID.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.ReservationID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.ReservationID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.ReservationID.toObject = function(includeInstance, msg) {
  var f, obj = {
    datasetId: (f = msg.getDatasetId()) && proto.datacatalog.DatasetID.toObject(includeInstance, f),
    tagName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.ReservationID}
 */
proto.datacatalog.ReservationID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.ReservationID;
  return proto.datacatalog.ReservationID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.ReservationID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.ReservationID}
 */
proto.datacatalog.ReservationID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datacatalog.DatasetID;
      reader.readMessage(value,proto.datacatalog.DatasetID.deserializeBinaryFromReader);
      msg.setDatasetId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTagName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.ReservationID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.ReservationID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.ReservationID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.ReservationID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatasetId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datacatalog.DatasetID.serializeBinaryToWriter
    );
  }
  f = message.getTagName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional DatasetID dataset_id = 1;
 * @return {?proto.datacatalog.DatasetID}
 */
proto.datacatalog.ReservationID.prototype.getDatasetId = function() {
  return /** @type{?proto.datacatalog.DatasetID} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.DatasetID, 1));
};


/**
 * @param {?proto.datacatalog.DatasetID|undefined} value
 * @return {!proto.datacatalog.ReservationID} returns this
*/
proto.datacatalog.ReservationID.prototype.setDatasetId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.ReservationID} returns this
 */
proto.datacatalog.ReservationID.prototype.clearDatasetId = function() {
  return this.setDatasetId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.ReservationID.prototype.hasDatasetId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string tag_name = 2;
 * @return {string}
 */
proto.datacatalog.ReservationID.prototype.getTagName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.ReservationID} returns this
 */
proto.datacatalog.ReservationID.prototype.setTagName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.GetOrExtendReservationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.GetOrExtendReservationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.GetOrExtendReservationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.GetOrExtendReservationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    reservationId: (f = msg.getReservationId()) && proto.datacatalog.ReservationID.toObject(includeInstance, f),
    ownerId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    heartbeatInterval: (f = msg.getHeartbeatInterval()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.GetOrExtendReservationRequest}
 */
proto.datacatalog.GetOrExtendReservationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.GetOrExtendReservationRequest;
  return proto.datacatalog.GetOrExtendReservationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.GetOrExtendReservationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.GetOrExtendReservationRequest}
 */
proto.datacatalog.GetOrExtendReservationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datacatalog.ReservationID;
      reader.readMessage(value,proto.datacatalog.ReservationID.deserializeBinaryFromReader);
      msg.setReservationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerId(value);
      break;
    case 3:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setHeartbeatInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.GetOrExtendReservationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.GetOrExtendReservationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.GetOrExtendReservationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.GetOrExtendReservationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReservationId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datacatalog.ReservationID.serializeBinaryToWriter
    );
  }
  f = message.getOwnerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHeartbeatInterval();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReservationID reservation_id = 1;
 * @return {?proto.datacatalog.ReservationID}
 */
proto.datacatalog.GetOrExtendReservationRequest.prototype.getReservationId = function() {
  return /** @type{?proto.datacatalog.ReservationID} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.ReservationID, 1));
};


/**
 * @param {?proto.datacatalog.ReservationID|undefined} value
 * @return {!proto.datacatalog.GetOrExtendReservationRequest} returns this
*/
proto.datacatalog.GetOrExtendReservationRequest.prototype.setReservationId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.GetOrExtendReservationRequest} returns this
 */
proto.datacatalog.GetOrExtendReservationRequest.prototype.clearReservationId = function() {
  return this.setReservationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.GetOrExtendReservationRequest.prototype.hasReservationId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string owner_id = 2;
 * @return {string}
 */
proto.datacatalog.GetOrExtendReservationRequest.prototype.getOwnerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.GetOrExtendReservationRequest} returns this
 */
proto.datacatalog.GetOrExtendReservationRequest.prototype.setOwnerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Duration heartbeat_interval = 3;
 * @return {?proto.google.protobuf.Duration}
 */
proto.datacatalog.GetOrExtendReservationRequest.prototype.getHeartbeatInterval = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 3));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.datacatalog.GetOrExtendReservationRequest} returns this
*/
proto.datacatalog.GetOrExtendReservationRequest.prototype.setHeartbeatInterval = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.GetOrExtendReservationRequest} returns this
 */
proto.datacatalog.GetOrExtendReservationRequest.prototype.clearHeartbeatInterval = function() {
  return this.setHeartbeatInterval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.GetOrExtendReservationRequest.prototype.hasHeartbeatInterval = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.Reservation.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.Reservation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.Reservation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.Reservation.toObject = function(includeInstance, msg) {
  var f, obj = {
    reservationId: (f = msg.getReservationId()) && proto.datacatalog.ReservationID.toObject(includeInstance, f),
    ownerId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    heartbeatInterval: (f = msg.getHeartbeatInterval()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    expiresAt: (f = msg.getExpiresAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    metadata: (f = msg.getMetadata()) && proto.datacatalog.Metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.Reservation}
 */
proto.datacatalog.Reservation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.Reservation;
  return proto.datacatalog.Reservation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.Reservation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.Reservation}
 */
proto.datacatalog.Reservation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datacatalog.ReservationID;
      reader.readMessage(value,proto.datacatalog.ReservationID.deserializeBinaryFromReader);
      msg.setReservationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerId(value);
      break;
    case 3:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setHeartbeatInterval(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setExpiresAt(value);
      break;
    case 6:
      var value = new proto.datacatalog.Metadata;
      reader.readMessage(value,proto.datacatalog.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.Reservation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.Reservation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.Reservation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.Reservation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReservationId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datacatalog.ReservationID.serializeBinaryToWriter
    );
  }
  f = message.getOwnerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHeartbeatInterval();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getExpiresAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.datacatalog.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReservationID reservation_id = 1;
 * @return {?proto.datacatalog.ReservationID}
 */
proto.datacatalog.Reservation.prototype.getReservationId = function() {
  return /** @type{?proto.datacatalog.ReservationID} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.ReservationID, 1));
};


/**
 * @param {?proto.datacatalog.ReservationID|undefined} value
 * @return {!proto.datacatalog.Reservation} returns this
*/
proto.datacatalog.Reservation.prototype.setReservationId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.Reservation} returns this
 */
proto.datacatalog.Reservation.prototype.clearReservationId = function() {
  return this.setReservationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.Reservation.prototype.hasReservationId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string owner_id = 2;
 * @return {string}
 */
proto.datacatalog.Reservation.prototype.getOwnerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.Reservation} returns this
 */
proto.datacatalog.Reservation.prototype.setOwnerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Duration heartbeat_interval = 3;
 * @return {?proto.google.protobuf.Duration}
 */
proto.datacatalog.Reservation.prototype.getHeartbeatInterval = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 3));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.datacatalog.Reservation} returns this
*/
proto.datacatalog.Reservation.prototype.setHeartbeatInterval = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.Reservation} returns this
 */
proto.datacatalog.Reservation.prototype.clearHeartbeatInterval = function() {
  return this.setHeartbeatInterval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.Reservation.prototype.hasHeartbeatInterval = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp expires_at = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.datacatalog.Reservation.prototype.getExpiresAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.datacatalog.Reservation} returns this
*/
proto.datacatalog.Reservation.prototype.setExpiresAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.Reservation} returns this
 */
proto.datacatalog.Reservation.prototype.clearExpiresAt = function() {
  return this.setExpiresAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.Reservation.prototype.hasExpiresAt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Metadata metadata = 6;
 * @return {?proto.datacatalog.Metadata}
 */
proto.datacatalog.Reservation.prototype.getMetadata = function() {
  return /** @type{?proto.datacatalog.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.Metadata, 6));
};


/**
 * @param {?proto.datacatalog.Metadata|undefined} value
 * @return {!proto.datacatalog.Reservation} returns this
*/
proto.datacatalog.Reservation.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.Reservation} returns this
 */
proto.datacatalog.Reservation.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.Reservation.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.GetOrExtendReservationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.GetOrExtendReservationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.GetOrExtendReservationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.GetOrExtendReservationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    reservation: (f = msg.getReservation()) && proto.datacatalog.Reservation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.GetOrExtendReservationResponse}
 */
proto.datacatalog.GetOrExtendReservationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.GetOrExtendReservationResponse;
  return proto.datacatalog.GetOrExtendReservationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.GetOrExtendReservationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.GetOrExtendReservationResponse}
 */
proto.datacatalog.GetOrExtendReservationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datacatalog.Reservation;
      reader.readMessage(value,proto.datacatalog.Reservation.deserializeBinaryFromReader);
      msg.setReservation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.GetOrExtendReservationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.GetOrExtendReservationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.GetOrExtendReservationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.GetOrExtendReservationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReservation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datacatalog.Reservation.serializeBinaryToWriter
    );
  }
};


/**
 * optional Reservation reservation = 1;
 * @return {?proto.datacatalog.Reservation}
 */
proto.datacatalog.GetOrExtendReservationResponse.prototype.getReservation = function() {
  return /** @type{?proto.datacatalog.Reservation} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.Reservation, 1));
};


/**
 * @param {?proto.datacatalog.Reservation|undefined} value
 * @return {!proto.datacatalog.GetOrExtendReservationResponse} returns this
*/
proto.datacatalog.GetOrExtendReservationResponse.prototype.setReservation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.GetOrExtendReservationResponse} returns this
 */
proto.datacatalog.GetOrExtendReservationResponse.prototype.clearReservation = function() {
  return this.setReservation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.GetOrExtendReservationResponse.prototype.hasReservation = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.ReleaseReservationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.ReleaseReservationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.ReleaseReservationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.ReleaseReservationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    reservationId: (f = msg.getReservationId()) && proto.datacatalog.ReservationID.toObject(includeInstance, f),
    ownerId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.ReleaseReservationRequest}
 */
proto.datacatalog.ReleaseReservationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.ReleaseReservationRequest;
  return proto.datacatalog.ReleaseReservationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.ReleaseReservationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.ReleaseReservationRequest}
 */
proto.datacatalog.ReleaseReservationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datacatalog.ReservationID;
      reader.readMessage(value,proto.datacatalog.ReservationID.deserializeBinaryFromReader);
      msg.setReservationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.ReleaseReservationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.ReleaseReservationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.ReleaseReservationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.ReleaseReservationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReservationId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datacatalog.ReservationID.serializeBinaryToWriter
    );
  }
  f = message.getOwnerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ReservationID reservation_id = 1;
 * @return {?proto.datacatalog.ReservationID}
 */
proto.datacatalog.ReleaseReservationRequest.prototype.getReservationId = function() {
  return /** @type{?proto.datacatalog.ReservationID} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.ReservationID, 1));
};


/**
 * @param {?proto.datacatalog.ReservationID|undefined} value
 * @return {!proto.datacatalog.ReleaseReservationRequest} returns this
*/
proto.datacatalog.ReleaseReservationRequest.prototype.setReservationId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.ReleaseReservationRequest} returns this
 */
proto.datacatalog.ReleaseReservationRequest.prototype.clearReservationId = function() {
  return this.setReservationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.ReleaseReservationRequest.prototype.hasReservationId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string owner_id = 2;
 * @return {string}
 */
proto.datacatalog.ReleaseReservationRequest.prototype.getOwnerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.ReleaseReservationRequest} returns this
 */
proto.datacatalog.ReleaseReservationRequest.prototype.setOwnerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.ReleaseReservationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.ReleaseReservationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.ReleaseReservationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.ReleaseReservationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.ReleaseReservationResponse}
 */
proto.datacatalog.ReleaseReservationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.ReleaseReservationResponse;
  return proto.datacatalog.ReleaseReservationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.ReleaseReservationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.ReleaseReservationResponse}
 */
proto.datacatalog.ReleaseReservationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.ReleaseReservationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.ReleaseReservationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.ReleaseReservationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.ReleaseReservationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.datacatalog.Dataset.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.Dataset.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.Dataset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.Dataset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.Dataset.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.datacatalog.DatasetID.toObject(includeInstance, f),
    metadata: (f = msg.getMetadata()) && proto.datacatalog.Metadata.toObject(includeInstance, f),
    partitionkeysList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.Dataset}
 */
proto.datacatalog.Dataset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.Dataset;
  return proto.datacatalog.Dataset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.Dataset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.Dataset}
 */
proto.datacatalog.Dataset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datacatalog.DatasetID;
      reader.readMessage(value,proto.datacatalog.DatasetID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.datacatalog.Metadata;
      reader.readMessage(value,proto.datacatalog.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addPartitionkeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.Dataset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.Dataset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.Dataset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.Dataset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datacatalog.DatasetID.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.datacatalog.Metadata.serializeBinaryToWriter
    );
  }
  f = message.getPartitionkeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional DatasetID id = 1;
 * @return {?proto.datacatalog.DatasetID}
 */
proto.datacatalog.Dataset.prototype.getId = function() {
  return /** @type{?proto.datacatalog.DatasetID} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.DatasetID, 1));
};


/**
 * @param {?proto.datacatalog.DatasetID|undefined} value
 * @return {!proto.datacatalog.Dataset} returns this
*/
proto.datacatalog.Dataset.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.Dataset} returns this
 */
proto.datacatalog.Dataset.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.Dataset.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Metadata metadata = 2;
 * @return {?proto.datacatalog.Metadata}
 */
proto.datacatalog.Dataset.prototype.getMetadata = function() {
  return /** @type{?proto.datacatalog.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.Metadata, 2));
};


/**
 * @param {?proto.datacatalog.Metadata|undefined} value
 * @return {!proto.datacatalog.Dataset} returns this
*/
proto.datacatalog.Dataset.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.Dataset} returns this
 */
proto.datacatalog.Dataset.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.Dataset.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string partitionKeys = 3;
 * @return {!Array<string>}
 */
proto.datacatalog.Dataset.prototype.getPartitionkeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.datacatalog.Dataset} returns this
 */
proto.datacatalog.Dataset.prototype.setPartitionkeysList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.datacatalog.Dataset} returns this
 */
proto.datacatalog.Dataset.prototype.addPartitionkeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.datacatalog.Dataset} returns this
 */
proto.datacatalog.Dataset.prototype.clearPartitionkeysList = function() {
  return this.setPartitionkeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.Partition.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.Partition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.Partition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.Partition.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.Partition}
 */
proto.datacatalog.Partition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.Partition;
  return proto.datacatalog.Partition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.Partition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.Partition}
 */
proto.datacatalog.Partition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.Partition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.Partition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.Partition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.Partition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.datacatalog.Partition.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.Partition} returns this
 */
proto.datacatalog.Partition.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.datacatalog.Partition.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.Partition} returns this
 */
proto.datacatalog.Partition.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.DatasetID.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.DatasetID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.DatasetID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.DatasetID.toObject = function(includeInstance, msg) {
  var f, obj = {
    project: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    domain: jspb.Message.getFieldWithDefault(msg, 3, ""),
    version: jspb.Message.getFieldWithDefault(msg, 4, ""),
    uuid: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.DatasetID}
 */
proto.datacatalog.DatasetID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.DatasetID;
  return proto.datacatalog.DatasetID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.DatasetID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.DatasetID}
 */
proto.datacatalog.DatasetID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.DatasetID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.DatasetID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.DatasetID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.DatasetID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string project = 1;
 * @return {string}
 */
proto.datacatalog.DatasetID.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.DatasetID} returns this
 */
proto.datacatalog.DatasetID.prototype.setProject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.datacatalog.DatasetID.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.DatasetID} returns this
 */
proto.datacatalog.DatasetID.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string domain = 3;
 * @return {string}
 */
proto.datacatalog.DatasetID.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.DatasetID} returns this
 */
proto.datacatalog.DatasetID.prototype.setDomain = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string version = 4;
 * @return {string}
 */
proto.datacatalog.DatasetID.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.DatasetID} returns this
 */
proto.datacatalog.DatasetID.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string UUID = 5;
 * @return {string}
 */
proto.datacatalog.DatasetID.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.DatasetID} returns this
 */
proto.datacatalog.DatasetID.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.datacatalog.Artifact.repeatedFields_ = [3,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.Artifact.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.Artifact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.Artifact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.Artifact.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dataset: (f = msg.getDataset()) && proto.datacatalog.DatasetID.toObject(includeInstance, f),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.datacatalog.ArtifactData.toObject, includeInstance),
    metadata: (f = msg.getMetadata()) && proto.datacatalog.Metadata.toObject(includeInstance, f),
    partitionsList: jspb.Message.toObjectList(msg.getPartitionsList(),
    proto.datacatalog.Partition.toObject, includeInstance),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    proto.datacatalog.Tag.toObject, includeInstance),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.Artifact}
 */
proto.datacatalog.Artifact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.Artifact;
  return proto.datacatalog.Artifact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.Artifact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.Artifact}
 */
proto.datacatalog.Artifact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.datacatalog.DatasetID;
      reader.readMessage(value,proto.datacatalog.DatasetID.deserializeBinaryFromReader);
      msg.setDataset(value);
      break;
    case 3:
      var value = new proto.datacatalog.ArtifactData;
      reader.readMessage(value,proto.datacatalog.ArtifactData.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 4:
      var value = new proto.datacatalog.Metadata;
      reader.readMessage(value,proto.datacatalog.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 5:
      var value = new proto.datacatalog.Partition;
      reader.readMessage(value,proto.datacatalog.Partition.deserializeBinaryFromReader);
      msg.addPartitions(value);
      break;
    case 6:
      var value = new proto.datacatalog.Tag;
      reader.readMessage(value,proto.datacatalog.Tag.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.Artifact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.Artifact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.Artifact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.Artifact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDataset();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.datacatalog.DatasetID.serializeBinaryToWriter
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.datacatalog.ArtifactData.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.datacatalog.Metadata.serializeBinaryToWriter
    );
  }
  f = message.getPartitionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.datacatalog.Partition.serializeBinaryToWriter
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.datacatalog.Tag.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.datacatalog.Artifact.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.Artifact} returns this
 */
proto.datacatalog.Artifact.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional DatasetID dataset = 2;
 * @return {?proto.datacatalog.DatasetID}
 */
proto.datacatalog.Artifact.prototype.getDataset = function() {
  return /** @type{?proto.datacatalog.DatasetID} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.DatasetID, 2));
};


/**
 * @param {?proto.datacatalog.DatasetID|undefined} value
 * @return {!proto.datacatalog.Artifact} returns this
*/
proto.datacatalog.Artifact.prototype.setDataset = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.Artifact} returns this
 */
proto.datacatalog.Artifact.prototype.clearDataset = function() {
  return this.setDataset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.Artifact.prototype.hasDataset = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ArtifactData data = 3;
 * @return {!Array<!proto.datacatalog.ArtifactData>}
 */
proto.datacatalog.Artifact.prototype.getDataList = function() {
  return /** @type{!Array<!proto.datacatalog.ArtifactData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.datacatalog.ArtifactData, 3));
};


/**
 * @param {!Array<!proto.datacatalog.ArtifactData>} value
 * @return {!proto.datacatalog.Artifact} returns this
*/
proto.datacatalog.Artifact.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.datacatalog.ArtifactData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.datacatalog.ArtifactData}
 */
proto.datacatalog.Artifact.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.datacatalog.ArtifactData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.datacatalog.Artifact} returns this
 */
proto.datacatalog.Artifact.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional Metadata metadata = 4;
 * @return {?proto.datacatalog.Metadata}
 */
proto.datacatalog.Artifact.prototype.getMetadata = function() {
  return /** @type{?proto.datacatalog.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.Metadata, 4));
};


/**
 * @param {?proto.datacatalog.Metadata|undefined} value
 * @return {!proto.datacatalog.Artifact} returns this
*/
proto.datacatalog.Artifact.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.Artifact} returns this
 */
proto.datacatalog.Artifact.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.Artifact.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Partition partitions = 5;
 * @return {!Array<!proto.datacatalog.Partition>}
 */
proto.datacatalog.Artifact.prototype.getPartitionsList = function() {
  return /** @type{!Array<!proto.datacatalog.Partition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.datacatalog.Partition, 5));
};


/**
 * @param {!Array<!proto.datacatalog.Partition>} value
 * @return {!proto.datacatalog.Artifact} returns this
*/
proto.datacatalog.Artifact.prototype.setPartitionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.datacatalog.Partition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.datacatalog.Partition}
 */
proto.datacatalog.Artifact.prototype.addPartitions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.datacatalog.Partition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.datacatalog.Artifact} returns this
 */
proto.datacatalog.Artifact.prototype.clearPartitionsList = function() {
  return this.setPartitionsList([]);
};


/**
 * repeated Tag tags = 6;
 * @return {!Array<!proto.datacatalog.Tag>}
 */
proto.datacatalog.Artifact.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.datacatalog.Tag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.datacatalog.Tag, 6));
};


/**
 * @param {!Array<!proto.datacatalog.Tag>} value
 * @return {!proto.datacatalog.Artifact} returns this
*/
proto.datacatalog.Artifact.prototype.setTagsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.datacatalog.Tag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.datacatalog.Tag}
 */
proto.datacatalog.Artifact.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.datacatalog.Tag, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.datacatalog.Artifact} returns this
 */
proto.datacatalog.Artifact.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * optional google.protobuf.Timestamp created_at = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.datacatalog.Artifact.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.datacatalog.Artifact} returns this
*/
proto.datacatalog.Artifact.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.Artifact} returns this
 */
proto.datacatalog.Artifact.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.Artifact.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.ArtifactData.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.ArtifactData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.ArtifactData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.ArtifactData.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && flyteidl_core_literals_pb.Literal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.ArtifactData}
 */
proto.datacatalog.ArtifactData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.ArtifactData;
  return proto.datacatalog.ArtifactData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.ArtifactData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.ArtifactData}
 */
proto.datacatalog.ArtifactData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new flyteidl_core_literals_pb.Literal;
      reader.readMessage(value,flyteidl_core_literals_pb.Literal.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.ArtifactData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.ArtifactData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.ArtifactData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.ArtifactData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      flyteidl_core_literals_pb.Literal.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.datacatalog.ArtifactData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.ArtifactData} returns this
 */
proto.datacatalog.ArtifactData.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional flyteidl.core.Literal value = 2;
 * @return {?proto.flyteidl.core.Literal}
 */
proto.datacatalog.ArtifactData.prototype.getValue = function() {
  return /** @type{?proto.flyteidl.core.Literal} */ (
    jspb.Message.getWrapperField(this, flyteidl_core_literals_pb.Literal, 2));
};


/**
 * @param {?proto.flyteidl.core.Literal|undefined} value
 * @return {!proto.datacatalog.ArtifactData} returns this
*/
proto.datacatalog.ArtifactData.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.ArtifactData} returns this
 */
proto.datacatalog.ArtifactData.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.ArtifactData.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.Tag.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.Tag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.Tag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.Tag.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    artifactId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dataset: (f = msg.getDataset()) && proto.datacatalog.DatasetID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.Tag}
 */
proto.datacatalog.Tag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.Tag;
  return proto.datacatalog.Tag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.Tag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.Tag}
 */
proto.datacatalog.Tag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setArtifactId(value);
      break;
    case 3:
      var value = new proto.datacatalog.DatasetID;
      reader.readMessage(value,proto.datacatalog.DatasetID.deserializeBinaryFromReader);
      msg.setDataset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.Tag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.Tag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.Tag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.Tag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArtifactId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDataset();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.datacatalog.DatasetID.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.datacatalog.Tag.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.Tag} returns this
 */
proto.datacatalog.Tag.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string artifact_id = 2;
 * @return {string}
 */
proto.datacatalog.Tag.prototype.getArtifactId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.Tag} returns this
 */
proto.datacatalog.Tag.prototype.setArtifactId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional DatasetID dataset = 3;
 * @return {?proto.datacatalog.DatasetID}
 */
proto.datacatalog.Tag.prototype.getDataset = function() {
  return /** @type{?proto.datacatalog.DatasetID} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.DatasetID, 3));
};


/**
 * @param {?proto.datacatalog.DatasetID|undefined} value
 * @return {!proto.datacatalog.Tag} returns this
*/
proto.datacatalog.Tag.prototype.setDataset = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.Tag} returns this
 */
proto.datacatalog.Tag.prototype.clearDataset = function() {
  return this.setDataset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.Tag.prototype.hasDataset = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyMapMap: (f = msg.getKeyMapMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.Metadata}
 */
proto.datacatalog.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.Metadata;
  return proto.datacatalog.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.Metadata}
 */
proto.datacatalog.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getKeyMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, string> key_map = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.datacatalog.Metadata.prototype.getKeyMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.datacatalog.Metadata} returns this
 */
proto.datacatalog.Metadata.prototype.clearKeyMapMap = function() {
  this.getKeyMapMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.datacatalog.FilterExpression.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.FilterExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.FilterExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.FilterExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.FilterExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    filtersList: jspb.Message.toObjectList(msg.getFiltersList(),
    proto.datacatalog.SinglePropertyFilter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.FilterExpression}
 */
proto.datacatalog.FilterExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.FilterExpression;
  return proto.datacatalog.FilterExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.FilterExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.FilterExpression}
 */
proto.datacatalog.FilterExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datacatalog.SinglePropertyFilter;
      reader.readMessage(value,proto.datacatalog.SinglePropertyFilter.deserializeBinaryFromReader);
      msg.addFilters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.FilterExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.FilterExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.FilterExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.FilterExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.datacatalog.SinglePropertyFilter.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SinglePropertyFilter filters = 1;
 * @return {!Array<!proto.datacatalog.SinglePropertyFilter>}
 */
proto.datacatalog.FilterExpression.prototype.getFiltersList = function() {
  return /** @type{!Array<!proto.datacatalog.SinglePropertyFilter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.datacatalog.SinglePropertyFilter, 1));
};


/**
 * @param {!Array<!proto.datacatalog.SinglePropertyFilter>} value
 * @return {!proto.datacatalog.FilterExpression} returns this
*/
proto.datacatalog.FilterExpression.prototype.setFiltersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.datacatalog.SinglePropertyFilter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.datacatalog.SinglePropertyFilter}
 */
proto.datacatalog.FilterExpression.prototype.addFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.datacatalog.SinglePropertyFilter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.datacatalog.FilterExpression} returns this
 */
proto.datacatalog.FilterExpression.prototype.clearFiltersList = function() {
  return this.setFiltersList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.datacatalog.SinglePropertyFilter.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.datacatalog.SinglePropertyFilter.PropertyFilterCase = {
  PROPERTY_FILTER_NOT_SET: 0,
  TAG_FILTER: 1,
  PARTITION_FILTER: 2,
  ARTIFACT_FILTER: 3,
  DATASET_FILTER: 4
};

/**
 * @return {proto.datacatalog.SinglePropertyFilter.PropertyFilterCase}
 */
proto.datacatalog.SinglePropertyFilter.prototype.getPropertyFilterCase = function() {
  return /** @type {proto.datacatalog.SinglePropertyFilter.PropertyFilterCase} */(jspb.Message.computeOneofCase(this, proto.datacatalog.SinglePropertyFilter.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.SinglePropertyFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.SinglePropertyFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.SinglePropertyFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.SinglePropertyFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    tagFilter: (f = msg.getTagFilter()) && proto.datacatalog.TagPropertyFilter.toObject(includeInstance, f),
    partitionFilter: (f = msg.getPartitionFilter()) && proto.datacatalog.PartitionPropertyFilter.toObject(includeInstance, f),
    artifactFilter: (f = msg.getArtifactFilter()) && proto.datacatalog.ArtifactPropertyFilter.toObject(includeInstance, f),
    datasetFilter: (f = msg.getDatasetFilter()) && proto.datacatalog.DatasetPropertyFilter.toObject(includeInstance, f),
    operator: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.SinglePropertyFilter}
 */
proto.datacatalog.SinglePropertyFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.SinglePropertyFilter;
  return proto.datacatalog.SinglePropertyFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.SinglePropertyFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.SinglePropertyFilter}
 */
proto.datacatalog.SinglePropertyFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datacatalog.TagPropertyFilter;
      reader.readMessage(value,proto.datacatalog.TagPropertyFilter.deserializeBinaryFromReader);
      msg.setTagFilter(value);
      break;
    case 2:
      var value = new proto.datacatalog.PartitionPropertyFilter;
      reader.readMessage(value,proto.datacatalog.PartitionPropertyFilter.deserializeBinaryFromReader);
      msg.setPartitionFilter(value);
      break;
    case 3:
      var value = new proto.datacatalog.ArtifactPropertyFilter;
      reader.readMessage(value,proto.datacatalog.ArtifactPropertyFilter.deserializeBinaryFromReader);
      msg.setArtifactFilter(value);
      break;
    case 4:
      var value = new proto.datacatalog.DatasetPropertyFilter;
      reader.readMessage(value,proto.datacatalog.DatasetPropertyFilter.deserializeBinaryFromReader);
      msg.setDatasetFilter(value);
      break;
    case 10:
      var value = /** @type {!proto.datacatalog.SinglePropertyFilter.ComparisonOperator} */ (reader.readEnum());
      msg.setOperator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.SinglePropertyFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.SinglePropertyFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.SinglePropertyFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.SinglePropertyFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTagFilter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datacatalog.TagPropertyFilter.serializeBinaryToWriter
    );
  }
  f = message.getPartitionFilter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.datacatalog.PartitionPropertyFilter.serializeBinaryToWriter
    );
  }
  f = message.getArtifactFilter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.datacatalog.ArtifactPropertyFilter.serializeBinaryToWriter
    );
  }
  f = message.getDatasetFilter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.datacatalog.DatasetPropertyFilter.serializeBinaryToWriter
    );
  }
  f = message.getOperator();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.datacatalog.SinglePropertyFilter.ComparisonOperator = {
  EQUALS: 0
};

/**
 * optional TagPropertyFilter tag_filter = 1;
 * @return {?proto.datacatalog.TagPropertyFilter}
 */
proto.datacatalog.SinglePropertyFilter.prototype.getTagFilter = function() {
  return /** @type{?proto.datacatalog.TagPropertyFilter} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.TagPropertyFilter, 1));
};


/**
 * @param {?proto.datacatalog.TagPropertyFilter|undefined} value
 * @return {!proto.datacatalog.SinglePropertyFilter} returns this
*/
proto.datacatalog.SinglePropertyFilter.prototype.setTagFilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.datacatalog.SinglePropertyFilter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.SinglePropertyFilter} returns this
 */
proto.datacatalog.SinglePropertyFilter.prototype.clearTagFilter = function() {
  return this.setTagFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.SinglePropertyFilter.prototype.hasTagFilter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PartitionPropertyFilter partition_filter = 2;
 * @return {?proto.datacatalog.PartitionPropertyFilter}
 */
proto.datacatalog.SinglePropertyFilter.prototype.getPartitionFilter = function() {
  return /** @type{?proto.datacatalog.PartitionPropertyFilter} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.PartitionPropertyFilter, 2));
};


/**
 * @param {?proto.datacatalog.PartitionPropertyFilter|undefined} value
 * @return {!proto.datacatalog.SinglePropertyFilter} returns this
*/
proto.datacatalog.SinglePropertyFilter.prototype.setPartitionFilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.datacatalog.SinglePropertyFilter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.SinglePropertyFilter} returns this
 */
proto.datacatalog.SinglePropertyFilter.prototype.clearPartitionFilter = function() {
  return this.setPartitionFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.SinglePropertyFilter.prototype.hasPartitionFilter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ArtifactPropertyFilter artifact_filter = 3;
 * @return {?proto.datacatalog.ArtifactPropertyFilter}
 */
proto.datacatalog.SinglePropertyFilter.prototype.getArtifactFilter = function() {
  return /** @type{?proto.datacatalog.ArtifactPropertyFilter} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.ArtifactPropertyFilter, 3));
};


/**
 * @param {?proto.datacatalog.ArtifactPropertyFilter|undefined} value
 * @return {!proto.datacatalog.SinglePropertyFilter} returns this
*/
proto.datacatalog.SinglePropertyFilter.prototype.setArtifactFilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.datacatalog.SinglePropertyFilter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.SinglePropertyFilter} returns this
 */
proto.datacatalog.SinglePropertyFilter.prototype.clearArtifactFilter = function() {
  return this.setArtifactFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.SinglePropertyFilter.prototype.hasArtifactFilter = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DatasetPropertyFilter dataset_filter = 4;
 * @return {?proto.datacatalog.DatasetPropertyFilter}
 */
proto.datacatalog.SinglePropertyFilter.prototype.getDatasetFilter = function() {
  return /** @type{?proto.datacatalog.DatasetPropertyFilter} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.DatasetPropertyFilter, 4));
};


/**
 * @param {?proto.datacatalog.DatasetPropertyFilter|undefined} value
 * @return {!proto.datacatalog.SinglePropertyFilter} returns this
*/
proto.datacatalog.SinglePropertyFilter.prototype.setDatasetFilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.datacatalog.SinglePropertyFilter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.SinglePropertyFilter} returns this
 */
proto.datacatalog.SinglePropertyFilter.prototype.clearDatasetFilter = function() {
  return this.setDatasetFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.SinglePropertyFilter.prototype.hasDatasetFilter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ComparisonOperator operator = 10;
 * @return {!proto.datacatalog.SinglePropertyFilter.ComparisonOperator}
 */
proto.datacatalog.SinglePropertyFilter.prototype.getOperator = function() {
  return /** @type {!proto.datacatalog.SinglePropertyFilter.ComparisonOperator} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.datacatalog.SinglePropertyFilter.ComparisonOperator} value
 * @return {!proto.datacatalog.SinglePropertyFilter} returns this
 */
proto.datacatalog.SinglePropertyFilter.prototype.setOperator = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.datacatalog.ArtifactPropertyFilter.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.datacatalog.ArtifactPropertyFilter.PropertyCase = {
  PROPERTY_NOT_SET: 0,
  ARTIFACT_ID: 1
};

/**
 * @return {proto.datacatalog.ArtifactPropertyFilter.PropertyCase}
 */
proto.datacatalog.ArtifactPropertyFilter.prototype.getPropertyCase = function() {
  return /** @type {proto.datacatalog.ArtifactPropertyFilter.PropertyCase} */(jspb.Message.computeOneofCase(this, proto.datacatalog.ArtifactPropertyFilter.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.ArtifactPropertyFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.ArtifactPropertyFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.ArtifactPropertyFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.ArtifactPropertyFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    artifactId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.ArtifactPropertyFilter}
 */
proto.datacatalog.ArtifactPropertyFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.ArtifactPropertyFilter;
  return proto.datacatalog.ArtifactPropertyFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.ArtifactPropertyFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.ArtifactPropertyFilter}
 */
proto.datacatalog.ArtifactPropertyFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setArtifactId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.ArtifactPropertyFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.ArtifactPropertyFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.ArtifactPropertyFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.ArtifactPropertyFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string artifact_id = 1;
 * @return {string}
 */
proto.datacatalog.ArtifactPropertyFilter.prototype.getArtifactId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.ArtifactPropertyFilter} returns this
 */
proto.datacatalog.ArtifactPropertyFilter.prototype.setArtifactId = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.datacatalog.ArtifactPropertyFilter.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.datacatalog.ArtifactPropertyFilter} returns this
 */
proto.datacatalog.ArtifactPropertyFilter.prototype.clearArtifactId = function() {
  return jspb.Message.setOneofField(this, 1, proto.datacatalog.ArtifactPropertyFilter.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.ArtifactPropertyFilter.prototype.hasArtifactId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.datacatalog.TagPropertyFilter.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.datacatalog.TagPropertyFilter.PropertyCase = {
  PROPERTY_NOT_SET: 0,
  TAG_NAME: 1
};

/**
 * @return {proto.datacatalog.TagPropertyFilter.PropertyCase}
 */
proto.datacatalog.TagPropertyFilter.prototype.getPropertyCase = function() {
  return /** @type {proto.datacatalog.TagPropertyFilter.PropertyCase} */(jspb.Message.computeOneofCase(this, proto.datacatalog.TagPropertyFilter.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.TagPropertyFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.TagPropertyFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.TagPropertyFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.TagPropertyFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    tagName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.TagPropertyFilter}
 */
proto.datacatalog.TagPropertyFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.TagPropertyFilter;
  return proto.datacatalog.TagPropertyFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.TagPropertyFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.TagPropertyFilter}
 */
proto.datacatalog.TagPropertyFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTagName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.TagPropertyFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.TagPropertyFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.TagPropertyFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.TagPropertyFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string tag_name = 1;
 * @return {string}
 */
proto.datacatalog.TagPropertyFilter.prototype.getTagName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.TagPropertyFilter} returns this
 */
proto.datacatalog.TagPropertyFilter.prototype.setTagName = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.datacatalog.TagPropertyFilter.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.datacatalog.TagPropertyFilter} returns this
 */
proto.datacatalog.TagPropertyFilter.prototype.clearTagName = function() {
  return jspb.Message.setOneofField(this, 1, proto.datacatalog.TagPropertyFilter.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.TagPropertyFilter.prototype.hasTagName = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.datacatalog.PartitionPropertyFilter.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.datacatalog.PartitionPropertyFilter.PropertyCase = {
  PROPERTY_NOT_SET: 0,
  KEY_VAL: 1
};

/**
 * @return {proto.datacatalog.PartitionPropertyFilter.PropertyCase}
 */
proto.datacatalog.PartitionPropertyFilter.prototype.getPropertyCase = function() {
  return /** @type {proto.datacatalog.PartitionPropertyFilter.PropertyCase} */(jspb.Message.computeOneofCase(this, proto.datacatalog.PartitionPropertyFilter.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.PartitionPropertyFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.PartitionPropertyFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.PartitionPropertyFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.PartitionPropertyFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyVal: (f = msg.getKeyVal()) && proto.datacatalog.KeyValuePair.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.PartitionPropertyFilter}
 */
proto.datacatalog.PartitionPropertyFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.PartitionPropertyFilter;
  return proto.datacatalog.PartitionPropertyFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.PartitionPropertyFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.PartitionPropertyFilter}
 */
proto.datacatalog.PartitionPropertyFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datacatalog.KeyValuePair;
      reader.readMessage(value,proto.datacatalog.KeyValuePair.deserializeBinaryFromReader);
      msg.setKeyVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.PartitionPropertyFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.PartitionPropertyFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.PartitionPropertyFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.PartitionPropertyFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyVal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datacatalog.KeyValuePair.serializeBinaryToWriter
    );
  }
};


/**
 * optional KeyValuePair key_val = 1;
 * @return {?proto.datacatalog.KeyValuePair}
 */
proto.datacatalog.PartitionPropertyFilter.prototype.getKeyVal = function() {
  return /** @type{?proto.datacatalog.KeyValuePair} */ (
    jspb.Message.getWrapperField(this, proto.datacatalog.KeyValuePair, 1));
};


/**
 * @param {?proto.datacatalog.KeyValuePair|undefined} value
 * @return {!proto.datacatalog.PartitionPropertyFilter} returns this
*/
proto.datacatalog.PartitionPropertyFilter.prototype.setKeyVal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.datacatalog.PartitionPropertyFilter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datacatalog.PartitionPropertyFilter} returns this
 */
proto.datacatalog.PartitionPropertyFilter.prototype.clearKeyVal = function() {
  return this.setKeyVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.PartitionPropertyFilter.prototype.hasKeyVal = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.KeyValuePair.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.KeyValuePair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.KeyValuePair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.KeyValuePair.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.KeyValuePair}
 */
proto.datacatalog.KeyValuePair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.KeyValuePair;
  return proto.datacatalog.KeyValuePair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.KeyValuePair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.KeyValuePair}
 */
proto.datacatalog.KeyValuePair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.KeyValuePair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.KeyValuePair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.KeyValuePair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.KeyValuePair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.datacatalog.KeyValuePair.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.KeyValuePair} returns this
 */
proto.datacatalog.KeyValuePair.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.datacatalog.KeyValuePair.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.KeyValuePair} returns this
 */
proto.datacatalog.KeyValuePair.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.datacatalog.DatasetPropertyFilter.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.datacatalog.DatasetPropertyFilter.PropertyCase = {
  PROPERTY_NOT_SET: 0,
  PROJECT: 1,
  NAME: 2,
  DOMAIN: 3,
  VERSION: 4
};

/**
 * @return {proto.datacatalog.DatasetPropertyFilter.PropertyCase}
 */
proto.datacatalog.DatasetPropertyFilter.prototype.getPropertyCase = function() {
  return /** @type {proto.datacatalog.DatasetPropertyFilter.PropertyCase} */(jspb.Message.computeOneofCase(this, proto.datacatalog.DatasetPropertyFilter.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.DatasetPropertyFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.DatasetPropertyFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.DatasetPropertyFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.DatasetPropertyFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    project: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    domain: jspb.Message.getFieldWithDefault(msg, 3, ""),
    version: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.DatasetPropertyFilter}
 */
proto.datacatalog.DatasetPropertyFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.DatasetPropertyFilter;
  return proto.datacatalog.DatasetPropertyFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.DatasetPropertyFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.DatasetPropertyFilter}
 */
proto.datacatalog.DatasetPropertyFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.DatasetPropertyFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.DatasetPropertyFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.DatasetPropertyFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.DatasetPropertyFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string project = 1;
 * @return {string}
 */
proto.datacatalog.DatasetPropertyFilter.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.DatasetPropertyFilter} returns this
 */
proto.datacatalog.DatasetPropertyFilter.prototype.setProject = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.datacatalog.DatasetPropertyFilter.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.datacatalog.DatasetPropertyFilter} returns this
 */
proto.datacatalog.DatasetPropertyFilter.prototype.clearProject = function() {
  return jspb.Message.setOneofField(this, 1, proto.datacatalog.DatasetPropertyFilter.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.DatasetPropertyFilter.prototype.hasProject = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.datacatalog.DatasetPropertyFilter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.DatasetPropertyFilter} returns this
 */
proto.datacatalog.DatasetPropertyFilter.prototype.setName = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.datacatalog.DatasetPropertyFilter.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.datacatalog.DatasetPropertyFilter} returns this
 */
proto.datacatalog.DatasetPropertyFilter.prototype.clearName = function() {
  return jspb.Message.setOneofField(this, 2, proto.datacatalog.DatasetPropertyFilter.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.DatasetPropertyFilter.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string domain = 3;
 * @return {string}
 */
proto.datacatalog.DatasetPropertyFilter.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.DatasetPropertyFilter} returns this
 */
proto.datacatalog.DatasetPropertyFilter.prototype.setDomain = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.datacatalog.DatasetPropertyFilter.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.datacatalog.DatasetPropertyFilter} returns this
 */
proto.datacatalog.DatasetPropertyFilter.prototype.clearDomain = function() {
  return jspb.Message.setOneofField(this, 3, proto.datacatalog.DatasetPropertyFilter.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.DatasetPropertyFilter.prototype.hasDomain = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string version = 4;
 * @return {string}
 */
proto.datacatalog.DatasetPropertyFilter.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.DatasetPropertyFilter} returns this
 */
proto.datacatalog.DatasetPropertyFilter.prototype.setVersion = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.datacatalog.DatasetPropertyFilter.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.datacatalog.DatasetPropertyFilter} returns this
 */
proto.datacatalog.DatasetPropertyFilter.prototype.clearVersion = function() {
  return jspb.Message.setOneofField(this, 4, proto.datacatalog.DatasetPropertyFilter.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datacatalog.DatasetPropertyFilter.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datacatalog.PaginationOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.datacatalog.PaginationOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datacatalog.PaginationOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.PaginationOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: jspb.Message.getFieldWithDefault(msg, 1, 0),
    token: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sortkey: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sortorder: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datacatalog.PaginationOptions}
 */
proto.datacatalog.PaginationOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datacatalog.PaginationOptions;
  return proto.datacatalog.PaginationOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datacatalog.PaginationOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datacatalog.PaginationOptions}
 */
proto.datacatalog.PaginationOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = /** @type {!proto.datacatalog.PaginationOptions.SortKey} */ (reader.readEnum());
      msg.setSortkey(value);
      break;
    case 4:
      var value = /** @type {!proto.datacatalog.PaginationOptions.SortOrder} */ (reader.readEnum());
      msg.setSortorder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datacatalog.PaginationOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datacatalog.PaginationOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datacatalog.PaginationOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datacatalog.PaginationOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSortkey();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSortorder();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.datacatalog.PaginationOptions.SortOrder = {
  DESCENDING: 0,
  ASCENDING: 1
};

/**
 * @enum {number}
 */
proto.datacatalog.PaginationOptions.SortKey = {
  CREATION_TIME: 0
};

/**
 * optional uint32 limit = 1;
 * @return {number}
 */
proto.datacatalog.PaginationOptions.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.datacatalog.PaginationOptions} returns this
 */
proto.datacatalog.PaginationOptions.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.datacatalog.PaginationOptions.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.datacatalog.PaginationOptions} returns this
 */
proto.datacatalog.PaginationOptions.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SortKey sortKey = 3;
 * @return {!proto.datacatalog.PaginationOptions.SortKey}
 */
proto.datacatalog.PaginationOptions.prototype.getSortkey = function() {
  return /** @type {!proto.datacatalog.PaginationOptions.SortKey} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.datacatalog.PaginationOptions.SortKey} value
 * @return {!proto.datacatalog.PaginationOptions} returns this
 */
proto.datacatalog.PaginationOptions.prototype.setSortkey = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional SortOrder sortOrder = 4;
 * @return {!proto.datacatalog.PaginationOptions.SortOrder}
 */
proto.datacatalog.PaginationOptions.prototype.getSortorder = function() {
  return /** @type {!proto.datacatalog.PaginationOptions.SortOrder} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.datacatalog.PaginationOptions.SortOrder} value
 * @return {!proto.datacatalog.PaginationOptions} returns this
 */
proto.datacatalog.PaginationOptions.prototype.setSortorder = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


goog.object.extend(exports, proto.datacatalog);
