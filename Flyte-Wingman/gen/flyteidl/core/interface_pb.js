// source: flyteidl/core/interface.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var flyteidl_core_types_pb = require('../../flyteidl/core/types_pb.js');
goog.object.extend(proto, flyteidl_core_types_pb);
var flyteidl_core_literals_pb = require('../../flyteidl/core/literals_pb.js');
goog.object.extend(proto, flyteidl_core_literals_pb);
goog.exportSymbol('proto.flyteidl.core.Parameter', null, global);
goog.exportSymbol('proto.flyteidl.core.Parameter.BehaviorCase', null, global);
goog.exportSymbol('proto.flyteidl.core.ParameterMap', null, global);
goog.exportSymbol('proto.flyteidl.core.TypedInterface', null, global);
goog.exportSymbol('proto.flyteidl.core.Variable', null, global);
goog.exportSymbol('proto.flyteidl.core.VariableMap', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flyteidl.core.Variable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flyteidl.core.Variable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flyteidl.core.Variable.displayName = 'proto.flyteidl.core.Variable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flyteidl.core.VariableMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flyteidl.core.VariableMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flyteidl.core.VariableMap.displayName = 'proto.flyteidl.core.VariableMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flyteidl.core.TypedInterface = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flyteidl.core.TypedInterface, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flyteidl.core.TypedInterface.displayName = 'proto.flyteidl.core.TypedInterface';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flyteidl.core.Parameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.flyteidl.core.Parameter.oneofGroups_);
};
goog.inherits(proto.flyteidl.core.Parameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flyteidl.core.Parameter.displayName = 'proto.flyteidl.core.Parameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flyteidl.core.ParameterMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flyteidl.core.ParameterMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flyteidl.core.ParameterMap.displayName = 'proto.flyteidl.core.ParameterMap';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flyteidl.core.Variable.prototype.toObject = function(opt_includeInstance) {
  return proto.flyteidl.core.Variable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flyteidl.core.Variable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.core.Variable.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = msg.getType()) && flyteidl_core_types_pb.LiteralType.toObject(includeInstance, f),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flyteidl.core.Variable}
 */
proto.flyteidl.core.Variable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flyteidl.core.Variable;
  return proto.flyteidl.core.Variable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flyteidl.core.Variable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flyteidl.core.Variable}
 */
proto.flyteidl.core.Variable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new flyteidl_core_types_pb.LiteralType;
      reader.readMessage(value,flyteidl_core_types_pb.LiteralType.deserializeBinaryFromReader);
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flyteidl.core.Variable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flyteidl.core.Variable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flyteidl.core.Variable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.core.Variable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      flyteidl_core_types_pb.LiteralType.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional LiteralType type = 1;
 * @return {?proto.flyteidl.core.LiteralType}
 */
proto.flyteidl.core.Variable.prototype.getType = function() {
  return /** @type{?proto.flyteidl.core.LiteralType} */ (
    jspb.Message.getWrapperField(this, flyteidl_core_types_pb.LiteralType, 1));
};


/**
 * @param {?proto.flyteidl.core.LiteralType|undefined} value
 * @return {!proto.flyteidl.core.Variable} returns this
*/
proto.flyteidl.core.Variable.prototype.setType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flyteidl.core.Variable} returns this
 */
proto.flyteidl.core.Variable.prototype.clearType = function() {
  return this.setType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.core.Variable.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.flyteidl.core.Variable.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.flyteidl.core.Variable} returns this
 */
proto.flyteidl.core.Variable.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flyteidl.core.VariableMap.prototype.toObject = function(opt_includeInstance) {
  return proto.flyteidl.core.VariableMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flyteidl.core.VariableMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.core.VariableMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    variablesMap: (f = msg.getVariablesMap()) ? f.toObject(includeInstance, proto.flyteidl.core.Variable.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flyteidl.core.VariableMap}
 */
proto.flyteidl.core.VariableMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flyteidl.core.VariableMap;
  return proto.flyteidl.core.VariableMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flyteidl.core.VariableMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flyteidl.core.VariableMap}
 */
proto.flyteidl.core.VariableMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getVariablesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.flyteidl.core.Variable.deserializeBinaryFromReader, "", new proto.flyteidl.core.Variable());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flyteidl.core.VariableMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flyteidl.core.VariableMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flyteidl.core.VariableMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.core.VariableMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariablesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.flyteidl.core.Variable.serializeBinaryToWriter);
  }
};


/**
 * map<string, Variable> variables = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.flyteidl.core.Variable>}
 */
proto.flyteidl.core.VariableMap.prototype.getVariablesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.flyteidl.core.Variable>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.flyteidl.core.Variable));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.flyteidl.core.VariableMap} returns this
 */
proto.flyteidl.core.VariableMap.prototype.clearVariablesMap = function() {
  this.getVariablesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flyteidl.core.TypedInterface.prototype.toObject = function(opt_includeInstance) {
  return proto.flyteidl.core.TypedInterface.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flyteidl.core.TypedInterface} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.core.TypedInterface.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputs: (f = msg.getInputs()) && proto.flyteidl.core.VariableMap.toObject(includeInstance, f),
    outputs: (f = msg.getOutputs()) && proto.flyteidl.core.VariableMap.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flyteidl.core.TypedInterface}
 */
proto.flyteidl.core.TypedInterface.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flyteidl.core.TypedInterface;
  return proto.flyteidl.core.TypedInterface.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flyteidl.core.TypedInterface} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flyteidl.core.TypedInterface}
 */
proto.flyteidl.core.TypedInterface.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.flyteidl.core.VariableMap;
      reader.readMessage(value,proto.flyteidl.core.VariableMap.deserializeBinaryFromReader);
      msg.setInputs(value);
      break;
    case 2:
      var value = new proto.flyteidl.core.VariableMap;
      reader.readMessage(value,proto.flyteidl.core.VariableMap.deserializeBinaryFromReader);
      msg.setOutputs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flyteidl.core.TypedInterface.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flyteidl.core.TypedInterface.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flyteidl.core.TypedInterface} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.core.TypedInterface.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputs();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.flyteidl.core.VariableMap.serializeBinaryToWriter
    );
  }
  f = message.getOutputs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.flyteidl.core.VariableMap.serializeBinaryToWriter
    );
  }
};


/**
 * optional VariableMap inputs = 1;
 * @return {?proto.flyteidl.core.VariableMap}
 */
proto.flyteidl.core.TypedInterface.prototype.getInputs = function() {
  return /** @type{?proto.flyteidl.core.VariableMap} */ (
    jspb.Message.getWrapperField(this, proto.flyteidl.core.VariableMap, 1));
};


/**
 * @param {?proto.flyteidl.core.VariableMap|undefined} value
 * @return {!proto.flyteidl.core.TypedInterface} returns this
*/
proto.flyteidl.core.TypedInterface.prototype.setInputs = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flyteidl.core.TypedInterface} returns this
 */
proto.flyteidl.core.TypedInterface.prototype.clearInputs = function() {
  return this.setInputs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.core.TypedInterface.prototype.hasInputs = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VariableMap outputs = 2;
 * @return {?proto.flyteidl.core.VariableMap}
 */
proto.flyteidl.core.TypedInterface.prototype.getOutputs = function() {
  return /** @type{?proto.flyteidl.core.VariableMap} */ (
    jspb.Message.getWrapperField(this, proto.flyteidl.core.VariableMap, 2));
};


/**
 * @param {?proto.flyteidl.core.VariableMap|undefined} value
 * @return {!proto.flyteidl.core.TypedInterface} returns this
*/
proto.flyteidl.core.TypedInterface.prototype.setOutputs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flyteidl.core.TypedInterface} returns this
 */
proto.flyteidl.core.TypedInterface.prototype.clearOutputs = function() {
  return this.setOutputs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.core.TypedInterface.prototype.hasOutputs = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.flyteidl.core.Parameter.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.flyteidl.core.Parameter.BehaviorCase = {
  BEHAVIOR_NOT_SET: 0,
  DEFAULT: 2,
  REQUIRED: 3
};

/**
 * @return {proto.flyteidl.core.Parameter.BehaviorCase}
 */
proto.flyteidl.core.Parameter.prototype.getBehaviorCase = function() {
  return /** @type {proto.flyteidl.core.Parameter.BehaviorCase} */(jspb.Message.computeOneofCase(this, proto.flyteidl.core.Parameter.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flyteidl.core.Parameter.prototype.toObject = function(opt_includeInstance) {
  return proto.flyteidl.core.Parameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flyteidl.core.Parameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.core.Parameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_var: (f = msg.getVar()) && proto.flyteidl.core.Variable.toObject(includeInstance, f),
    pb_default: (f = msg.getDefault()) && flyteidl_core_literals_pb.Literal.toObject(includeInstance, f),
    required: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flyteidl.core.Parameter}
 */
proto.flyteidl.core.Parameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flyteidl.core.Parameter;
  return proto.flyteidl.core.Parameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flyteidl.core.Parameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flyteidl.core.Parameter}
 */
proto.flyteidl.core.Parameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.flyteidl.core.Variable;
      reader.readMessage(value,proto.flyteidl.core.Variable.deserializeBinaryFromReader);
      msg.setVar(value);
      break;
    case 2:
      var value = new flyteidl_core_literals_pb.Literal;
      reader.readMessage(value,flyteidl_core_literals_pb.Literal.deserializeBinaryFromReader);
      msg.setDefault(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequired(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flyteidl.core.Parameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flyteidl.core.Parameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flyteidl.core.Parameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.core.Parameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVar();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.flyteidl.core.Variable.serializeBinaryToWriter
    );
  }
  f = message.getDefault();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      flyteidl_core_literals_pb.Literal.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional Variable var = 1;
 * @return {?proto.flyteidl.core.Variable}
 */
proto.flyteidl.core.Parameter.prototype.getVar = function() {
  return /** @type{?proto.flyteidl.core.Variable} */ (
    jspb.Message.getWrapperField(this, proto.flyteidl.core.Variable, 1));
};


/**
 * @param {?proto.flyteidl.core.Variable|undefined} value
 * @return {!proto.flyteidl.core.Parameter} returns this
*/
proto.flyteidl.core.Parameter.prototype.setVar = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flyteidl.core.Parameter} returns this
 */
proto.flyteidl.core.Parameter.prototype.clearVar = function() {
  return this.setVar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.core.Parameter.prototype.hasVar = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Literal default = 2;
 * @return {?proto.flyteidl.core.Literal}
 */
proto.flyteidl.core.Parameter.prototype.getDefault = function() {
  return /** @type{?proto.flyteidl.core.Literal} */ (
    jspb.Message.getWrapperField(this, flyteidl_core_literals_pb.Literal, 2));
};


/**
 * @param {?proto.flyteidl.core.Literal|undefined} value
 * @return {!proto.flyteidl.core.Parameter} returns this
*/
proto.flyteidl.core.Parameter.prototype.setDefault = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.flyteidl.core.Parameter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flyteidl.core.Parameter} returns this
 */
proto.flyteidl.core.Parameter.prototype.clearDefault = function() {
  return this.setDefault(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.core.Parameter.prototype.hasDefault = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool required = 3;
 * @return {boolean}
 */
proto.flyteidl.core.Parameter.prototype.getRequired = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.flyteidl.core.Parameter} returns this
 */
proto.flyteidl.core.Parameter.prototype.setRequired = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.flyteidl.core.Parameter.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.flyteidl.core.Parameter} returns this
 */
proto.flyteidl.core.Parameter.prototype.clearRequired = function() {
  return jspb.Message.setOneofField(this, 3, proto.flyteidl.core.Parameter.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.core.Parameter.prototype.hasRequired = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flyteidl.core.ParameterMap.prototype.toObject = function(opt_includeInstance) {
  return proto.flyteidl.core.ParameterMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flyteidl.core.ParameterMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.core.ParameterMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    parametersMap: (f = msg.getParametersMap()) ? f.toObject(includeInstance, proto.flyteidl.core.Parameter.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flyteidl.core.ParameterMap}
 */
proto.flyteidl.core.ParameterMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flyteidl.core.ParameterMap;
  return proto.flyteidl.core.ParameterMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flyteidl.core.ParameterMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flyteidl.core.ParameterMap}
 */
proto.flyteidl.core.ParameterMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getParametersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.flyteidl.core.Parameter.deserializeBinaryFromReader, "", new proto.flyteidl.core.Parameter());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flyteidl.core.ParameterMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flyteidl.core.ParameterMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flyteidl.core.ParameterMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.core.ParameterMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.flyteidl.core.Parameter.serializeBinaryToWriter);
  }
};


/**
 * map<string, Parameter> parameters = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.flyteidl.core.Parameter>}
 */
proto.flyteidl.core.ParameterMap.prototype.getParametersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.flyteidl.core.Parameter>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.flyteidl.core.Parameter));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.flyteidl.core.ParameterMap} returns this
 */
proto.flyteidl.core.ParameterMap.prototype.clearParametersMap = function() {
  this.getParametersMap().clear();
  return this;};


goog.object.extend(exports, proto.flyteidl.core);
