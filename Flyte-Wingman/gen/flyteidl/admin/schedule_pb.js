// source: flyteidl/admin/schedule.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.flyteidl.admin.CronSchedule', null, global);
goog.exportSymbol('proto.flyteidl.admin.FixedRate', null, global);
goog.exportSymbol('proto.flyteidl.admin.FixedRateUnit', null, global);
goog.exportSymbol('proto.flyteidl.admin.Schedule', null, global);
goog.exportSymbol('proto.flyteidl.admin.Schedule.ScheduleexpressionCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flyteidl.admin.FixedRate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flyteidl.admin.FixedRate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flyteidl.admin.FixedRate.displayName = 'proto.flyteidl.admin.FixedRate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flyteidl.admin.CronSchedule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flyteidl.admin.CronSchedule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flyteidl.admin.CronSchedule.displayName = 'proto.flyteidl.admin.CronSchedule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flyteidl.admin.Schedule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.flyteidl.admin.Schedule.oneofGroups_);
};
goog.inherits(proto.flyteidl.admin.Schedule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flyteidl.admin.Schedule.displayName = 'proto.flyteidl.admin.Schedule';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flyteidl.admin.FixedRate.prototype.toObject = function(opt_includeInstance) {
  return proto.flyteidl.admin.FixedRate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flyteidl.admin.FixedRate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.admin.FixedRate.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    unit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flyteidl.admin.FixedRate}
 */
proto.flyteidl.admin.FixedRate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flyteidl.admin.FixedRate;
  return proto.flyteidl.admin.FixedRate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flyteidl.admin.FixedRate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flyteidl.admin.FixedRate}
 */
proto.flyteidl.admin.FixedRate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!proto.flyteidl.admin.FixedRateUnit} */ (reader.readEnum());
      msg.setUnit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flyteidl.admin.FixedRate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flyteidl.admin.FixedRate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flyteidl.admin.FixedRate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.admin.FixedRate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUnit();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint32 value = 1;
 * @return {number}
 */
proto.flyteidl.admin.FixedRate.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.flyteidl.admin.FixedRate} returns this
 */
proto.flyteidl.admin.FixedRate.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional FixedRateUnit unit = 2;
 * @return {!proto.flyteidl.admin.FixedRateUnit}
 */
proto.flyteidl.admin.FixedRate.prototype.getUnit = function() {
  return /** @type {!proto.flyteidl.admin.FixedRateUnit} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.flyteidl.admin.FixedRateUnit} value
 * @return {!proto.flyteidl.admin.FixedRate} returns this
 */
proto.flyteidl.admin.FixedRate.prototype.setUnit = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flyteidl.admin.CronSchedule.prototype.toObject = function(opt_includeInstance) {
  return proto.flyteidl.admin.CronSchedule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flyteidl.admin.CronSchedule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.admin.CronSchedule.toObject = function(includeInstance, msg) {
  var f, obj = {
    schedule: jspb.Message.getFieldWithDefault(msg, 1, ""),
    offset: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flyteidl.admin.CronSchedule}
 */
proto.flyteidl.admin.CronSchedule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flyteidl.admin.CronSchedule;
  return proto.flyteidl.admin.CronSchedule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flyteidl.admin.CronSchedule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flyteidl.admin.CronSchedule}
 */
proto.flyteidl.admin.CronSchedule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchedule(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flyteidl.admin.CronSchedule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flyteidl.admin.CronSchedule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flyteidl.admin.CronSchedule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.admin.CronSchedule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchedule();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOffset();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string schedule = 1;
 * @return {string}
 */
proto.flyteidl.admin.CronSchedule.prototype.getSchedule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.flyteidl.admin.CronSchedule} returns this
 */
proto.flyteidl.admin.CronSchedule.prototype.setSchedule = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string offset = 2;
 * @return {string}
 */
proto.flyteidl.admin.CronSchedule.prototype.getOffset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.flyteidl.admin.CronSchedule} returns this
 */
proto.flyteidl.admin.CronSchedule.prototype.setOffset = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.flyteidl.admin.Schedule.oneofGroups_ = [[1,2,4]];

/**
 * @enum {number}
 */
proto.flyteidl.admin.Schedule.ScheduleexpressionCase = {
  SCHEDULEEXPRESSION_NOT_SET: 0,
  CRON_EXPRESSION: 1,
  RATE: 2,
  CRON_SCHEDULE: 4
};

/**
 * @return {proto.flyteidl.admin.Schedule.ScheduleexpressionCase}
 */
proto.flyteidl.admin.Schedule.prototype.getScheduleexpressionCase = function() {
  return /** @type {proto.flyteidl.admin.Schedule.ScheduleexpressionCase} */(jspb.Message.computeOneofCase(this, proto.flyteidl.admin.Schedule.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flyteidl.admin.Schedule.prototype.toObject = function(opt_includeInstance) {
  return proto.flyteidl.admin.Schedule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flyteidl.admin.Schedule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.admin.Schedule.toObject = function(includeInstance, msg) {
  var f, obj = {
    cronExpression: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rate: (f = msg.getRate()) && proto.flyteidl.admin.FixedRate.toObject(includeInstance, f),
    cronSchedule: (f = msg.getCronSchedule()) && proto.flyteidl.admin.CronSchedule.toObject(includeInstance, f),
    kickoffTimeInputArg: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flyteidl.admin.Schedule}
 */
proto.flyteidl.admin.Schedule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flyteidl.admin.Schedule;
  return proto.flyteidl.admin.Schedule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flyteidl.admin.Schedule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flyteidl.admin.Schedule}
 */
proto.flyteidl.admin.Schedule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCronExpression(value);
      break;
    case 2:
      var value = new proto.flyteidl.admin.FixedRate;
      reader.readMessage(value,proto.flyteidl.admin.FixedRate.deserializeBinaryFromReader);
      msg.setRate(value);
      break;
    case 4:
      var value = new proto.flyteidl.admin.CronSchedule;
      reader.readMessage(value,proto.flyteidl.admin.CronSchedule.deserializeBinaryFromReader);
      msg.setCronSchedule(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKickoffTimeInputArg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flyteidl.admin.Schedule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flyteidl.admin.Schedule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flyteidl.admin.Schedule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.admin.Schedule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.flyteidl.admin.FixedRate.serializeBinaryToWriter
    );
  }
  f = message.getCronSchedule();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.flyteidl.admin.CronSchedule.serializeBinaryToWriter
    );
  }
  f = message.getKickoffTimeInputArg();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string cron_expression = 1;
 * @return {string}
 */
proto.flyteidl.admin.Schedule.prototype.getCronExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.flyteidl.admin.Schedule} returns this
 */
proto.flyteidl.admin.Schedule.prototype.setCronExpression = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.flyteidl.admin.Schedule.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.flyteidl.admin.Schedule} returns this
 */
proto.flyteidl.admin.Schedule.prototype.clearCronExpression = function() {
  return jspb.Message.setOneofField(this, 1, proto.flyteidl.admin.Schedule.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.admin.Schedule.prototype.hasCronExpression = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FixedRate rate = 2;
 * @return {?proto.flyteidl.admin.FixedRate}
 */
proto.flyteidl.admin.Schedule.prototype.getRate = function() {
  return /** @type{?proto.flyteidl.admin.FixedRate} */ (
    jspb.Message.getWrapperField(this, proto.flyteidl.admin.FixedRate, 2));
};


/**
 * @param {?proto.flyteidl.admin.FixedRate|undefined} value
 * @return {!proto.flyteidl.admin.Schedule} returns this
*/
proto.flyteidl.admin.Schedule.prototype.setRate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.flyteidl.admin.Schedule.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flyteidl.admin.Schedule} returns this
 */
proto.flyteidl.admin.Schedule.prototype.clearRate = function() {
  return this.setRate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.admin.Schedule.prototype.hasRate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CronSchedule cron_schedule = 4;
 * @return {?proto.flyteidl.admin.CronSchedule}
 */
proto.flyteidl.admin.Schedule.prototype.getCronSchedule = function() {
  return /** @type{?proto.flyteidl.admin.CronSchedule} */ (
    jspb.Message.getWrapperField(this, proto.flyteidl.admin.CronSchedule, 4));
};


/**
 * @param {?proto.flyteidl.admin.CronSchedule|undefined} value
 * @return {!proto.flyteidl.admin.Schedule} returns this
*/
proto.flyteidl.admin.Schedule.prototype.setCronSchedule = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.flyteidl.admin.Schedule.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flyteidl.admin.Schedule} returns this
 */
proto.flyteidl.admin.Schedule.prototype.clearCronSchedule = function() {
  return this.setCronSchedule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.admin.Schedule.prototype.hasCronSchedule = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string kickoff_time_input_arg = 3;
 * @return {string}
 */
proto.flyteidl.admin.Schedule.prototype.getKickoffTimeInputArg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.flyteidl.admin.Schedule} returns this
 */
proto.flyteidl.admin.Schedule.prototype.setKickoffTimeInputArg = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.flyteidl.admin.FixedRateUnit = {
  MINUTE: 0,
  HOUR: 1,
  DAY: 2
};

goog.object.extend(exports, proto.flyteidl.admin);
